---
title: "In-class Exercise 4"
author: "Fangyuan Zhu"
date: 4 Feb 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## 1 Get started

In this In-class exercise, we will explore more interesting packages to visualize data with statistical summary information shown in the plots.

## 2 Packages used

Packages will be used in this exercise are:

-   *plotly*

-   *tidyverse*

-   *DT*

-   *patchwork*

-   *ggstatsplot*

-   *readr*

```{r}
pacman::p_load(ggplot, plotly, readr, tidyverse, DT, patchwork, ggstatsplot, readxl, see, parameters, performance, dplyr)
```

## 3 Data used

Data we will use in this exercise is *Exam_data.csv,* and we can import the data with codes chunk below.

```{r}
exam_data<-read_csv("data/Exam_data.csv")
```

## 4 Working with visual variable: *plot_ly()* method

Today we are going to explore the function `plot_ly()` to create an interactive plot.

```{r eval=FALSE}
plot_ly(data = exam_data,
        x = ~ENGLISH,
        y = ~MATHS,
        color = ~RACE)
```

```{r eval=FALSE}
p<-ggplot(data = exam_data,
          aes(x = MATHS,
              y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

ggplotly(p)
```

## 5 Working with *ggstatsplot* package

Need to still figure out why I cannot install *ggstatsplot* package.

## 6 Regression modeling

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

```{r}
my_sum<-exam_data%>%
  group_by(RACE)%>%
  summarise(
    n = n(),
    mean = mean(MATHS),
    sd = sd(MATHS)
  )%>%
  mutate(se = sd/sqrt(n-1))
```

```{r}
model<-lm(Price ~ Age_08_04 + Mfg_Year + KM +
            Weight + Guarantee_Period, data = car_resale)
model
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x = RACE,
        ymin = mean - se,
        ymax = mean + se),
    width = 0.2,
    colour = "black",
    alpha = 0.9,
    size = 0.5
  ) +
  geom_point(aes(
    x = RACE,
    y = mean),
    stat = "identity",
    color = "red",
    size = 1.5,
    alpha = 1)

model[["coefficients"]]
```
