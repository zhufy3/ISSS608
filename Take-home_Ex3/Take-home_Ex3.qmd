---
title: "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation"
author: "Fangyuan Zhu"
date: 12 Feburary 2023
date-modified: "`r Sys.Date()`"
page-layout: full
fig-height: 4
fig-width: 6
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## üèÜ Our Tasks

In this take-home exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in **Lesson 4: Fundamentals of Visual Analytics**. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.

For the purpose of this study, the focus should be on **3-ROOM, 4-ROOM and 5-ROOM types**. The study period should be on **2022**.

## 2 Data Used

*Resale flat prices based on registration date from Jan-2017 onwards* will be used to prepare the analytical visualisation. It is available at [Data.gov.sg](https://data.gov.sg/).

## 3 The Designing Tools

To achieve the purposes in this exercise, R packages *tidyverse, tidyr* and their extension will be used. Code chunk below will help us load these packages into R studio environment.

-   [tidyverse](https://www.tidyverse.org/) : ggplot2(), readr(), dplyr()

-   tidyr

-   ggstatsplot: plotting with statistic features

-   funModeling: freq()

-   plotly: interactive plotting

-   ungeviz

-   gganimate: animate plotting

-   DT: interactive datatable

-   patchwork: layout of figures

-   ggdist

-   ggpubr

-   psych

-   performance: check_linear

```{r}
pacman::p_load(tidyverse, tidyr, ggstatsplot, funModeling, plotly, ungeviz, gganimate, DT, patchwork, ggdist, ggpubr, psych, performance)
```

## 4 Data Preparation

### 4.1 Importing data

First, let us import the data in *CSV* form into R environment using code chunk below.

```{r eval=FALSE}
data<-read_csv("data/resale-flat-prices.csv")
```

As information shows above, this data set includes 146701 rows and 11 columns. Let take a closer look at the data set by using code chunk below.

```{r eval=FALSE}
glimpse(data)
```

![](images/paste-7B522BA9.png)

### 4.2 Data cleaning

See that the time is stored in *character* type, and we need to extract data only in 2022. Therefore, we need to first extract on the year number to recode the original data as shown below.

```{r eval=FALSE}
data$month<-str_extract(data$month,"(\\d+)")
```

Now let us check the data column *month.*

```{r eval=FALSE}
head(data$month,10)
```

![](images/paste-6CEDCAD8.png){width="700" height="300"}

In addition, the *remaining_lease* no needs to contain month information, so we recode the values in the column to only retain its year part. See in code chunk below.

```{r eval=FALSE}
data$remaining_lease<-as.numeric(str_extract(data$remaining_lease,"(\\d+)"))
```

See only year number is retained. Now let us filter the data frame by filtering data only in 2022.

```{r eval=FALSE}
data<-data%>%
  filter(month == "2022")
```

Next we need to only focus on *3 ROOM, 4 ROOM* and *5 ROOM*, so let first look at how many types are there of *flat_type* column. We use `freq()` function of *funModeling* package to draw the frequency graph of this column.

```{r eval=FALSE}
freq(data$flat_type)
```

![](images/paste-EBFE4AA4.png){width="6.31in" height="4.67in"}

Noted that *4 ROOM* type takes the most part of the total, followed by *5 ROOM* and *3 ROOM.* Now let us delete the redundant column *month* and *block* as shown below, and write a new data frame named *resale-flat2022.csv* to contract the data size.

```{r eval=FALSE}
data<-data%>%
  filter(flat_type%in%
           c("3 ROOM",
             "4 ROOM",
             "5 ROOM"))%>%
  select(-1,-4)
```

Now take a quick glimpse we can find that the variable *lease_commence_date* and *remaining_lease* have high association. We can plot an association plot to check their relationship.

```{r eval=FALSE}
ggscatterstats(
  data = data,
  x = lease_commence_date,
  y = remaining_lease,
  marginal = FALSE,
  )
```

![](images/paste-8DE01A88.png){style="width " width="7.59in"}

As shown in plot above, we see that these two variables have complete association with the test result ***r = 1***. Therefore, we can just delete one column of them. Let us delete the column named *remaining_lease.*

```{r eval=FALSE}
data<-data%>%
  select(-8)

write_csv(data,"data/resale-flat2022.csv")
```

![](images/paste-F02BF02E.png)

![](images/paste-5C66F883.png)

Noted that the data size has been contacted to 1.6 MB.

### 4.3 Missing value checking

Before we start our analysis, we should first check missing values in this data table. Code chunk below will be used to show us the length of missing values in all columns in this data table.

```{r}
data<-read_csv("data/resale-flat2022.csv")
summary(data[rowSums(is.na(data))!=0,])
```

As shown in table above, no missing values in this data table.

### 4.4 Creating new variables

To remove the influence from area of a flat to its resale price, we create a new variable of resale price per sqm, and we name it as *resale_price_per.*

```{r}
data<-data%>%
  mutate(`resale_price_per` = resale_price/floor_area_sqm)

summary(data$resale_price_per)
```

Noted that the scale of the new created column is changed to **3333** to **14731**.

## 5 Visualization Analysis

### 5.1 Exploratory descriptive analysis

First of all, let us do our EDA with our variables. This step plays a critical role to show the potential patterns behind the data. Let's go!ü•≥

### 5.2 Distribution test

First of all, let take a look at the distribution of dependent variable *resale_price_per* by plotting its histogram plot using codes below.

```{r fig.height=5, fig.width=8}
p<-ggplot(data = data,
       aes(resale_price_per,
           tooltip = flat_model))+
  geom_histogram(binwidth = 50)
  labs(x = "Resale Price/Sqm",
       title = "Distribution of Resale Price/Sqm \nby Flat Model")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))
  
ggplotly(p)
```

As shown in graph above, we see that the resale price per sqm is highly **right skewed**. According to the information of outliers, flat model of *Type S1* has very high resale price per sqm. That means most of the resale price per sqm congregated at lower prices, which is intuitively rational.

Now let us test if it fits normal distribution though we can guess it doesn't.

```{r}
qqnorm(data$resale_price_per)
qqline(data$resale_price_per)
```

Also it shows that it's good to use non-parametric test because it's better to use ***medium*** to represent our sample. Even though we have large enough data set, we don't assume the distribution of resale price per sqm conforming to normal distribution, that's why we use ***Bayes*** test.

```{r eval=FALSE}
gghistostats(
  data = data,
  x = resale_price_per,
  type = "by",
  test.value = 60,
  xlab = "Resale Price Per Sqm"
)+
  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))
```

![](images/paste-E9F10680.png){width="729"}

Note that the ln(BF01) = -inf, we get a posterior difference of **5675.88**, with **Confidence Interval = \[5658.63, 5692.95\]**. Next let us take a look at the distribution of *town,* to see the sample capacity of each town.

```{r}
reorder_size <- function(x) {
        factor(x, levels = names(sort(table(x), decreasing = TRUE)))}

p<-ggplot(data = data,
       aes(x = reorder_size(town),
       fill = flat_type))+
  geom_bar(color = "black",
           alpha = 0.8)+
  labs(x = "Town",
    title = "Distribution of Town",
    subtitle = "Fill by Flat Type")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))

ggplotly(p)
```

See that ***BUKITTIMAH*** has the least amount of **52** samples.

```{r fig.height=5, fig.width=8}
reorder_size <- function(x) {
        factor(x, levels = names(sort(table(x), decreasing = TRUE)))}

p<-ggplot(data = data,
       aes(x = reorder_size(flat_model),
       fill = flat_type))+
  geom_bar(color = "black",
           alpha = 0.8)+
  labs(x = "Flat Model",
    title = "Distribution of Flat Model",
    subtitle = "Fill by Flat Type")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))

ggplotly(p)
```

With the distribution plot for *flat_model,* we see that flat model named *Improved-Maisonette* only has **2** sample flats with **5 rooms** in total. Also we can see the main flat type for each model of flat. For example, flats of *Model A* mainly have 4 rooms, and flats of *Improved* mainly have 5 rooms.

Let us also take a look at the proportion of storey range for each model of flat.

```{r fig.height=5, fig.width=8}
reorder_size <- function(x) {
        factor(x, levels = names(sort(table(x), decreasing = TRUE)))}

p<-ggplot(data = data,
       aes(x = reorder_size(flat_model),
       fill = storey_range))+
  geom_bar(color = "black",
           alpha = 0.8)+
  labs(x = "Flat Model",
    title = "Distribution of Flat Model",
    subtitle = "Fill by Flat Type")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))

ggplotly(p)
```

It shows that for each model of flat, there are feature storey ranges. Some covers many storey ranges, while others are quite congregated,

## 6 Visual statistical testing

### 6.1 Distribution test

First let us see the distribution of flat type using code chunk below.

```{r eval=FALSE}
ggplot(data = data,
       aes(resale_price_per))+
  geom_histogram(binwidth = 50)+
  facet_grid(~ flat_type)+
  labs(x = "Resale Price/Sqm",
       title = "Distribution of Resale Price/Sqm \nby Flat Type")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))
```

![](images/paste-0BA9D507.png){width="729"}

Noted that the resale price/sqm for each flat type is also **right skewed.** Even if we remove those outliers, it cannot be symmetrical. let us do *non-parametric* testing for them. Indeed, we can also test the normal distribution by using Q-Q plot. `qqnorm()`and `qqline()`from `psych package` will be used.

```{r fig.height=5, fig.width=8}
qqnorm(data[data$flat_type=="3 ROOM",]$resale_price_per)
qqline(data[data$flat_type=="3 ROOM",]$resale_price_per)

qqnorm(data[data$flat_type=="4 ROOM",]$resale_price_per)
qqline(data[data$flat_type=="4 ROOM",]$resale_price_per)

qqnorm(data[data$flat_type=="5 ROOM",]$resale_price_per)
qqline(data[data$flat_type=="5 ROOM",]$resale_price_per)

par(mfrow = c(1,3))
```

Noted that these three distributions don't fit normal distributions. Therefore, let's test their distributions with ***Bayes*** **test.**

```{r}

p1<-gghistostats(
  data = data[data$flat_type=="3 ROOM",],
  x = resale_price_per,
  type = "by",
  test.value = 60,
  xlab = "Resale Price Per Sqm"
)+
  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))

p2<-gghistostats(
  data = data[data$flat_type=="4 ROOM",],
  x = resale_price_per,
  type = "by",
  test.value = 60,
  xlab = "Resale Price Per Sqm"
)+
  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))

p3<-gghistostats(
  data = data[data$flat_type=="5 ROOM",],
  x = resale_price_per,
  type = "by",
  test.value = 60,
  xlab = "Resale Price Per Sqm"
)+
  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))

ggarrange(p1+ rremove("x.text"), p2 + rremove("x.text"), p3 + rremove("x.text"),ncol = 1)
```

Noted that all the mean resale price/sqm for flats with 3 ROOM, 4 ROOM and 5 ROOM is 5670.22, 5766.91 and 5526.43 respectively, with Confidence Interval = \[5640.72, 5700.93\], \[5739.76, 5793.93\] and \[5495.52, 5556.27\] respectively.

### 6.2 Visualizing uncertainty

A point estimate is a single number, such as a mean. And uncertainty is expressed as standard error, confidence interval, or confidence interval. Now let's plot interactive error bar plots by using üíº*ggplot2()* package to indicate the 95% confidence interval of mean resale price for different towns.

First of all, we need statistical features of the columns we care about.

-   group the observation by *town*,

-   computes the count of observations, mean, standard deviation and standard error of *resale_price* by *town*, and

-   save the output as a tibble data table called `sum_tbl`.

```{r}
sum_tbl <- data %>%
  group_by(town) %>%
  summarise(
    n=n(),
    mean=mean(resale_price_per),
    sd=sd(resale_price_per)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

Let us take a look at the table we created.

```{r}
datatable(sum_tbl, options = list(pageLength = 5), style = "auto") %>% 
  formatStyle(columns = colnames(sum_tbl),
  backgroundColor = "White")
```

```{r fig.height=5, fig.width=8}
p<-ggplot(sum_tbl) +
  geom_errorbar(aes(x=town, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.95, 
    size=0.5) +
  geom_point(aes
           (x=town, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  geom_hline(yintercept = mean(data$resale_price_per),
             linetype = "dashed",
             color = "blue")+
  ggtitle("Standard error of mean Resale Price/Sqm by Town")+
  labs(x = "Town", y = "Mean")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=0, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1),
          plot.caption = element_text(hjust = 0, colour = "blue", face = "italic"))

ggplotly(p)

```

From the above plot, we can easily see that the mean resale price per sqm for all towns are above **5736** SG Dollar, but in some towns it is quite dispersed. For example, the town ***CENTRAL AREA*** has the highest mean resale price of about **8410** SG Dollar, but the range of *Uncertainty* is also large*.* On the other hand, towns like ***WOODLANDS*** **and *JURONG WEST*** have relatively low resale prices per sqm, but the standard error or their uncertainty is also small.

Generally, towns whose mean resale price is **above** the gross mean resale price have relatively **large** standard error, while whose mean resale price is **under** the gross mean resale price have relatively **small** standard error. ü§ì

Now let us use a more convenient way of *ggdist()* package to plot error bar with **95%** confidence interval for other variables, which are *flat_type, street_name, storey_range, and flat_model.*

```{r eval=FALSE}
data %>%
  ggplot(aes(x = flat_type, 
             y = resale_price_per)) +
  stat_gradientinterval(   
    fill = "bisque3",
    p_limits = c(0.025, 0.975),
    show.legend = TRUE     
  ) +
  geom_hline(yintercept = mean(data$resale_price_per),
             linetype = "dashed",
             color = "blue")+
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100000))+
  labs(
    title = "Visualising confidence intervals of mean Resale Price per Sqm \nby Flat type",
    subtitle = "Gradient + interval plot")
```

![](images/paste-35418D0C.png){width="729"}

From the chart above, we can easily see that the **mean** resale price per sqm is almost the **same** for each type of flat. But through the extent of shade of colors, we can see that there are subtle differences in standard error for resale price per sqm of these 3 types. For flat with **3 rooms**, the mean resale price per sqm is relatively **congregated** than other two types.

```{r eval=FALSE}
data %>%
  ggplot(aes(x = storey_range, 
             y = resale_price_per)) +
  stat_gradientinterval(   
    fill = "bisque3",
    p_limits = c(0.025, 0.975),
    show.legend = TRUE     
  ) +
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100000))+
  geom_hline(yintercept = mean(data$resale_price_per),
             linetype = "dashed",
             color = "blue")+
  labs(
    title = "Visualising confidence intervals of mean Resale Price/Sqm \nby Storey Range",
    subtitle = "Gradient + interval plot")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))

```

![](images/paste-0B8A4A95.png){width="729"}

As shown in the above chart, we easily see that as the **storey** **rises**, the **mean resale price per sqm** is **higher**. In addition, the **standard** **error** of mean resale price per sqm of storey range from ***16 to 27*** is the **largest** among other storey ranges. And we can see that flats with storey above **13** are more expensive than the gross mean resale price per sqm.

Now let us take a look at the pattern within *flat_model*

```{r eval=FALSE}
data %>%
  ggplot(aes(x = reorder(flat_model,
                        resale_price_per,
                        FUN = mean), 
             y = resale_price_per)) +
  stat_gradientinterval(   
    fill = "bisque3",
    p_limits = c(0.025, 0.975),
    show.legend = TRUE     
  ) +
  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100000))+
  geom_hline(yintercept = mean(data$resale_price_per),
             linetype = "dashed",
             color = "blue")+
  labs(
    title = "Visualising confidence intervals of mean Resale Price/Sqm \nby Flat Model",
    subtitle = "Gradient + interval plot")+
  theme(plot.title = element_text(size=13, face = "bold"),
          axis.title.y=element_text(angle=90, size = 9),
          axis.title.y.left = element_text(vjust = 0.5),
          axis.title.x.bottom = element_text( size = 9),
          axis.text.y = element_text(size = 5,vjust = 1),
          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))
```

![](images/paste-3BA2819D.png){width="729"}

From chart above, it is easily to tell that the flat model named ***Type S1*** has the **highest** **mean** resale price per sqm among others, with relatively **large** **standard error**. And flat with model named ***Model A2*** has the **lowest** **mean** resale price per sqm among others, with relatively **small** **standard error**.

When we talk about visualizing uncertainty, though, we usually mean visualizing information about different values the data could plausibly be. Therefore, we can usually give a certain percentage of confidence for the audiences to see the interval of the average value for a specific variable, and we can also offer the audiences a friendly animation to see the resale price for different type of flat - 3 ROOM, 4 ROOM and 5 ROOM - when we sampling 5 times.

```{r fig.height=5, fig.width=8}
p<-ggplot(data = data, 
       (aes(x = factor(flat_type), 
            y = resale_price))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(5, 
                             group = flat_type), 
              color = "#D55E00") +
  theme_bw()+
  transition_states(.draw)

```

### 6.3 Visual time series analysis

At last, let us take a look at the pattern between mean resale price per sqm and lease commence year, which is a time series graph and let us line chart instead of error bar plot.

```{r fig.height=5, fig.width=8}
p<-ggplot(data = data,
       aes(x = lease_commence_date,
           y = resale_price_per))+
  geom_line(stat = "summary",
            fun.y = "mean")+
  geom_hline(yintercept = mean(data$resale_price_per),
             linetype = "dashed",
             color = "blue")+
  scale_x_continuous(breaks = seq(min(data$lease_commence_date),max(data$resale_price_per), by = 5))+
  labs(x = "Lease Commence Year",
       y = "Mean Resale Price/Sqm",
       title = "Line plot of Mean Resale Price/Sqm \nvs. Lease Commence Year ")

ggplotly(p)
```

Noted that across the past 50 years, the gross mean resale price per sqm is showing a rising tendency. But in short period, from year 1975, the mean resale price per sqm is dropping down until year 1991. And a **sharp increase** in year **2006**, followed by dramatic fluctuations in later years, reaching **highest** **point** of 9049 in year **2011**.

### 6.4 Visual association of resale price/sqm vs. floor area

Now let us explore the association between mean resale price/sqm and floor area by plotting a scatter plot.

```{r eval=FALSE}
ggplot(data = data,
       aes(x = floor_area_sqm,
           y = resale_price_per))+
  geom_point(aes(color = flat_type), alpha = 0.8)+
  geom_smooth(method = "lm",
              color = "black")
```

![](images/paste-A57D5DFE.png){width="729"}

From this combined chart above, we see that the area of floor is basically aligned with number of rooms of a flat, meaning that the differences between average area of each room among flats are not much big. On the other hand, as the **area** of floor **rises**, the **resale** **price** **per** **sqm** actually goes **down**.

### 6.5 One-way ANOVA Test

As shown above visual analysis, we see that the mean resale prices per sqm for flat type are quite the same. Therefore, we can use One-way ANOVA Test to see whether the assumption is true. Because we have tested the distribution of these 3 samples that they don't conform to normal distribution, we choose the type of "robust" as our testing method to test if the means of 3 groups are the same.

Reference to [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggbetweenstats.html).

```{r eval=FALSE}
ggbetweenstats(
  data = data,
  x = flat_type, 
  y = resale_price_per,
  type = "robust",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

![](images/paste-7F15D709.png){width="729"}

The testing result shows a very small **p-value \< 0.05** and small **F-value** of **51.27**, which means that we have enough evident to reject the H0 that the mean of each class in this group are equal. In fact, the mean resale price per sqm of flat with **3** **rooms** is **higher** than that with **4** **rooms**, which is **higher** than that with **5** **rooms**.

## 7 Linear Regression Modeling

After the former tests, we have noticed that the distribution of resale price per sqm is highly skewed, let's see if the skewness can be reduced by data transformation. let us first try **Log.**

```{r eval=FALSE}
qqnorm(log(data$resale_price_per))
qqline(log(data$resale_price_per))
```

![](images/paste-C7C4A1B9.png){width="729"}

Noted that the data gets less skewed after transforming.

```{r}
model<-lm(log(resale_price_per) ~ town + flat_type + storey_range +
            floor_area_sqm + flat_model + lease_commence_date, data = data)
model
```

```{r eval=FALSE}
check_c <- check_collinearity(model)
plot(check_c)+
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    title = element_text(hjust = 1)
  )
```

![](images/paste-0BF59835.png){width="729" height="450"}

From the plot above, noted that variables ***flat_model, flat_type*** and ***floor_area_sqm***have highly collinearity. While variables ***lease_commence_date*****, *storey_range*** and ***town*** have relatively low colliearity. May try to exclude some of them in our later analysis.
