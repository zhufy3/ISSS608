---
title: "Take-home Exercise 3 Resale Flat Prices Analytical Visualisation"
author: "Fangyuan Zhu"
date: 12 Feburary 2023
date-modified: "`r Sys.Date()`"
page-layout: full
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## Our Tasks

In this take-home exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in **Lesson 4: Fundamentals of Visual Analytics**. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.

For the purpose of this study, the focus should be on **3-ROOM, 4-ROOM and 5-ROOM types**. The study period should be on **2022**.

## Data Used

*Resale flat prices based on registration date from Jan-2017 onwards* will be used to prepare the analytical visualisation. It is available at [Data.gov.sg](https://data.gov.sg/).

## Packages Used

## The Designing Tools

To achieve the purposes in this exercise, R packages *tidyverse, tidyr* and their extension will be used. Code chunk below will help us load these packages into R studio environment.

```{r}
pacman::p_load(tidyverse, tidyr, ggstatsplot, funModeling, plotly)
```

## Data Preparation

### Importing data

First, let us import the data in *CSV* form into R environment using code chunk below.

```{r}
data<-read_csv("data/resale-flat-prices.csv")
```

As information shows above, this data set includes 146701 rows and 11 columns. Let take a closer look at the data set by using code chunk below.

```{r eval=FALSE}
glimpse(data)
```

![](images/paste-7B522BA9.png)

### Data cleaning

See that the time is stored in *character* type, and we need to extract data only in 2022. Therefore, we need to first extract on the year number to recode the original data as shown below.

```{r eval=FALSE}
data$month<-str_extract(data$month,"(\\d+)")
```

Now let us check the data column *month.*

```{r eval=FALSE}
head(data$month,10)
```

![](images/paste-6CEDCAD8.png)

In addition, the *remaining_lease* no needs to contain month information, so we recode the values in the column to only retain its year part. See in code chunk below.

```{r eval=FALSE}
data$remaining_lease<-as.numeric(str_extract(data$remaining_lease,"(\\d+)"))
```

See only year number is retained. Now let us filter the data frame by filtering data only in 2022.

```{r eval=FALSE}
data<-data%>%
  filter(month == "2022")
```

Next we need to only focus on *3 ROOM, 4 ROOM* and *5 ROOM*, so let first look at how many types are there of *flat_type* column. We use `freq()` function of *funModeling* package to draw the frequency graph of this column.

```{r eval=FALSE}
freq(data$flat_type)
```

![](images/paste-EBFE4AA4.png)

Noted that *4 ROOM* type takes the most part of the total, followed by *5 ROOM* and *3 ROOM.* Now let us delete the redundant column *month* and *block* as shown below, and write a new data frame named *resale-flat2022.csv* to contract the data size.

```{r eval=FALSE}
data<-data%>%
  filter(flat_type%in%
           c("3 ROOM",
             "4 ROOM",
             "5 ROOM"))%>%
  select(-1,-4)

write_csv(data,"data/resale-flat2022.csv")
```

![](images/paste-F02BF02E.png)

![](images/paste-5C66F883.png)

Noted that the data size has been contacted to 1.6 MB.

### Missing value checking

Before we start our analysis, we should first check missing values in this data table. Code chunk below will be used to show us the length of missing values in all columns in this data table.

```{r}
data<-read_csv("data/resale-flat2022.csv")
summary(data[rowSums(is.na(data))!=0,])
```

As shown in table above, no missing values in this data table.

## Visualization Analysis

### Exploratory descriptive analysis

First of all, let us do our EDA with our variables. This step plays a critical role to show the potential patterns behind the data. Let's go!ðŸ¥³

#### Distribution test

Now let first check out the distribution pattern of these 9 variables in histogram graphs. Code below being used to achieve this.

```{r}
parea<-ggplot(data = data,
       aes(x = floor_area_sqm))+
  geom_density(fill = "skyblue",
               alpha = 0.3)+
  geom_boxplot()+
  labs(x = "Floor Area",
       y = "Density")

parea

pdate<-gghistostats(
  data = data,
  x = lease_commence_date,
  type = "np",
  test.value = 60,
  xlab = "Lease Commence Date"
)

pdate
```

```{}
```

```{r}
ggplot(data, aes(lease_commence_date)) + geom_density(adjust = 0.3, 
    fill = "deepskyblue", alpha = 0.2) + labs(x = "Lease Commencement Date", y = "Density", 
    caption = "Fig.5 A Density Plot of Lease Profile of HDBs")
```

Also, we can suspect that the *lease_commence_date* and *remaining_lease* are highly associated. Therefore we can plot an association graph to see their association relationship as shown below.

#### Outliers checking

```{r}
p<-ggscatterstats(
  data = data,
  x = lease_commence_date,
  y = remaining_lease,
  marginal = FALSE,
  )


```

### Visual statistical testing

#### Visualizing uncertainty

When we talk about visualizing uncertainty, though, we usually mean visualizing information about different values the data could plausibly be.

```{r}
ggplot(data = data, 
       (aes(x = factor(flat_type), y = resale_price))) +
  geom_point(position = position_jitter(
    height = 0.3, width = 0.05), 
    size = 0.4, color = "#0072B2", alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)
```

#### Multivariate analysis
