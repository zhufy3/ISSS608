[
  {
    "objectID": "Hands_on_Ex1/Hands_on_Ex1.html",
    "href": "Hands_on_Ex1/Hands_on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Show the code\npacman::p_load(readr, ggplot2, tidyverse)\n\n\n\n\n\nLet us use read_csv() of readr package to import our data used in this hands-on Exercise as shown in the code chunk below.\n\n\nShow the code\nexam_data<-read_csv(\"data/Exam_data.csv\")\n\n\nAs the information shows above, there are 4 categorical attributes which are ID, CLASS, GENDER, RACE, and the rest are continuous attributes which are ENGLISH, MATHS, SCIENCE. The data has a total of 322 rows.\nLet’s take a quick look at statistics summary of the data imported using summary() function.\n\n\nShow the code\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\n\nNow let’s use functions in ggplot2 package to describe attributes of the data by plotting different graphs. First let’s take a look at the MATHS grade by plotting a histgram for each class.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"light blue\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL) +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\nNow we can also display gender attributes by assigning blue to Male and red to Female in the histogram.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"black\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL) +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\n\n\n\nNow let us see the distribution of MATHS scores in a kernel density estimate plot using code chunk below.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = MATHS))+\n  geom_density() + \n  ggtitle(\"Density of Maths Scores\")\n\n\n\n\n\nFrom the plot above, it shows that the density of Maths scores fits a left skewed bell-shaped distribution. And the mean of the distribution lays around 80.\nThen we can plot two kernel density lines for different genders by using chunk below.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()\n\n\n\n\n\nWe can see that two kernel density lines for different genders are very similar.\n\n\n\n\n\nWe can also plot boxplots of Maths scores for genders to visualise statistics attributes like Median, two hinges, two whiskers, outliers and mean by using codes below.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n       x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun.y = \"mean\",\n               color = \"red\",\n               size = 4)\n\n\n\n\n\nNoted that the Maths scores of Male are bit higher than that of Female. But the range of Maths scores of Male is larger than that of Female.\n\n\n\nThen let us plot Notched plot by using codes below to make boxplot more visulised.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n\nWe can also integrate point plot and boxplot together.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nViolin plots are a way of comparing multiple data distributions. The code below plot the distribution of Maths score by gender in violin plot.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nNoted that Male has lower Maths scores than Female and higher scores than Female. And both gender’s Maths scores congregate around 80.\n\n\n\nThe code chunk below combined a violin plot and a boxplot to show the distribution of Maths scores by gender.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(fill=\"light blue\") +\n  geom_boxplot(alpha=0.5)           \n\n\n\n\n\n\n\n\n\nNow let’s plot point graph to show correlation between MATHS scores and ENGLISH scores by using code chunk below.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme_classic()\n\n\n\n\n\nThe interpretability of this graph can be improved by adding a best fit curve.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme_dark()\n\n\n\n\n\nNoted an obvious poisitive linear correlation between Maths score and English score.\nThe default smoothing method can be overridden as shown below.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nFaceting generates small multiples, each displaying a different subset of the data. And facets are an alternative to aesthetics for displaying additional discrete variables.\n\n\nThe code chunk below plots a trellis plot for distribution of Maths score using facet-wrap().\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bin = 20) +\n  facet_wrap(~ CLASS)\n\n\n\n\n\nNow we can see distributions of Maths scores by class 3A, 3B, 3C, 3D, 3E, 3F, 3G, 3H, 3I.\n\n\n\nWe can slice the Maths scores in each class by gender for boxplots as shown below.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = CLASS)) +\n  geom_boxplot() +\n  facet_wrap(~ GENDER)\n\n\n\n\n\nAlso we can show the plot in vertical direction.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = CLASS)) +\n  geom_boxplot() +\n  facet_grid(GENDER~.)\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  facet_grid(GENDER~CLASS)\n\n\n\n\n\n\n\n\n\nNow let us plot bar charts using functions in ggplot2 package.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme(panel.background = element_rect(fill = \"light blue\", colour = \"white\"))\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = fct_infreq(RACE))) +\n  geom_bar() +\n  xlab(\"Race\") +\n  ylab(\"No. of Pupils\") +\n  geom_text(stat = \"count\", aes(label = ..count..),vjust = -1) +\n  coord_cartesian(ylim = c(0,210))"
  },
  {
    "objectID": "Hands_on_Ex3/Hands-on_Ex3.html",
    "href": "Hands_on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Ex2",
    "section": "",
    "text": "Show the code\npacman::p_load(ggiraph,plotly,gganimate,DT,tidyverse,patchwork)"
  },
  {
    "objectID": "Hands_on_Ex3/Hands-on_Ex3.html#data-used",
    "href": "Hands_on_Ex3/Hands-on_Ex3.html#data-used",
    "title": "Hands-on Ex2",
    "section": "Data used",
    "text": "Data used\nExam_data.csv will be used in this hands-on exercise 2.\n\n\nShow the code\nexam_data<-read_csv('data/Exam_data.csv')\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands_on_Ex4/Hands_on_Ex4.html",
    "href": "Hands_on_Ex4/Hands_on_Ex4.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this exercise, we are going to explore packages that give us statistical summary for the data we care about."
  },
  {
    "objectID": "Hands_on_Ex4/Hands_on_Ex4.html#importing-packages",
    "href": "Hands_on_Ex4/Hands_on_Ex4.html#importing-packages",
    "title": "Hands-on Exercise 4",
    "section": "2 Importing packages",
    "text": "2 Importing packages\nWe will use:\n\nggstatsplot\ntidyverse\n\npackages in this exercise.\n\n\nShow the code\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands_on_Ex4/Hands_on_Ex4.html#data-used",
    "href": "Hands_on_Ex4/Hands_on_Ex4.html#data-used",
    "title": "Hands-on Exercise 4",
    "section": "3 Data used",
    "text": "3 Data used\nExam_data.csv"
  },
  {
    "objectID": "Hands_on_Ex4/Hands_on_Ex4.html#importing-data-used",
    "href": "Hands_on_Ex4/Hands_on_Ex4.html#importing-data-used",
    "title": "Hands-on Exercise 4",
    "section": "4 Importing data used",
    "text": "4 Importing data used\n\n\nShow the code\nexam<-read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "The hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\n\n\nShow the code\npacman::p_load(tidyverse, ggtern, dplyr, plotly)\n\n\n\n\n\nData of Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 will be used in this exercise.\n\n\nShow the code\npop_data<-read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n\n\n\nShow the code\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population)%>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)%>%\n  select(c(1,2,22,23,24,25))\n\nwrite_csv(agpop_mutated,\"data/agpop.csv\")\n\n\n\n\n\n\n\nShow the code\nagpop_mutated<-read_csv(\"data/agpop.csv\")\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\nShow the code\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\nShow the code\nlabel <- function(txt){\n  list(\n    text = txt,\n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\",\n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt){\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"),\n  baxis = axis(\"Active\"),\n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated,\n  a = ~YOUNG,\n  b = ~ACTIVE,\n  c = ~OLD,\n  color = I(\"black\"),\n  type = \"scatterternary\"\n)%>%\n  layout(\n    annotations = label(\"Ternary Markers\"),\n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#packages-used-2",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#packages-used-2",
    "title": "Hands-on Exercise 5",
    "section": "Packages used",
    "text": "Packages used\n\n\nShow the code\npacman::p_load(seriation, dendextend, heatmaply)"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#data-used-2",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#data-used-2",
    "title": "Hands-on Exercise 5",
    "section": "Data used",
    "text": "Data used\n\n\nShow the code\nwh <- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#prepare-data",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#prepare-data",
    "title": "Hands-on Exercise 5",
    "section": "Prepare data",
    "text": "Prepare data\nReplace the row name with country’s names.\n\n\nShow the code\nrow.names(wh) <- wh$Country\n\n\nTransform the data into matrix.\n\n\nShow the code\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#plotting-heat-maps",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#plotting-heat-maps",
    "title": "Hands-on Exercise 5",
    "section": "Plotting heat maps",
    "text": "Plotting heat maps\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix)\n\n\n\n\n\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\nShow the code\nheatmaply(mtcars)\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#packages-used-3",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#packages-used-3",
    "title": "Hands-on Exercise 5",
    "section": "Packages used",
    "text": "Packages used\n\n\nShow the code\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#data-used-3",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#data-used-3",
    "title": "Hands-on Exercise 5",
    "section": "Data used",
    "text": "Data used\nWHData-2018.csv will be used in this exercise.\n\n\nShow the code\nwh <- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#plotting-a-simple-parallel-coordinates",
    "title": "Hands-on Exercise 5",
    "section": "Plotting a simple parallel coordinates",
    "text": "Plotting a simple parallel coordinates\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#plotting-with-facet",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#plotting-with-facet",
    "title": "Hands-on Exercise 5",
    "section": "Plotting with facet",
    "text": "Plotting with facet\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#rotating-x-axis",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#rotating-x-axis",
    "title": "Hands-on Exercise 5",
    "section": "Rotating x-axis",
    "text": "Rotating x-axis\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#adjusting-x-label-text",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#adjusting-x-label-text",
    "title": "Hands-on Exercise 5",
    "section": "Adjusting x-label text",
    "text": "Adjusting x-label text\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#interactive-plot",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#interactive-plot",
    "title": "Hands-on Exercise 5",
    "section": "Interactive plot",
    "text": "Interactive plot\n\n\nShow the code\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nShow the code\nparallelPlot(wh,\n             rotateTitle = TRUE)  ##rotate axis label\n\n\n\n\n\n\n\n\nShow the code\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)  ##change the color scheme"
  },
  {
    "objectID": "Hands_on_Ex5/Hands_on_Ex5.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands_on_Ex5/Hands_on_Ex5.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5",
    "section": "Parallel coordinates plot with histogram",
    "text": "Parallel coordinates plot with histogram\n\n\nShow the code\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands_on_Ex6/Hands_on_Ex6.html",
    "href": "Hands_on_Ex6/Hands_on_Ex6.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "Show the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, tidyverse, patchwork)"
  },
  {
    "objectID": "Hands_on_Ex6/Hands_on_Ex6.html#plotting-calendar-heatmap",
    "href": "Hands_on_Ex6/Hands_on_Ex6.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\n\nImporting data\n\n\nShow the code\nattacks<-read_csv(\"data/eventlog.csv\")\n\n\n\n\nExamining data structure\nUse kable() to review the data imported.\n\n\nShow the code\nkable(head(attacks))\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData preparation\nStep 1: Deriving weekday and hour of day fields.\n\n\nShow the code\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\n\nShow the code\nwkday_levels<-c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks<-attacks%>%\n  group_by(tz)%>%\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz))%>%\n  ungroup()%>%\n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour = factor(\n      hour, levels = 0:23))\n\n\n\n\nShow the code\nkable(head(attacks))\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands_on_Ex6/Hands_on_Ex6.html#building-the-calendar-heatmaps",
    "href": "Hands_on_Ex6/Hands_on_Ex6.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Building the Calendar Heatmaps",
    "text": "Building the Calendar Heatmaps\n\n\nShow the code\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup()%>%\n  na.omit()\n\np1<-ggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\np2<-ggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \n#theme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\np1/p2\n\n\n\n\n\n\n\nShow the code\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\n\nShow the code\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands_on_Ex6/Hands_on_Ex6.html#cycle-plot",
    "href": "Hands_on_Ex6/Hands_on_Ex6.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\n\n\nShow the code\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nShow the code\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\n\nShow the code\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\n\nShow the code\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nShow the code\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Inclass_Ex1/Inclass_Ex1.html",
    "href": "Inclass_Ex1/Inclass_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In-class Exercise 1"
  },
  {
    "objectID": "Inclass_Ex2/Inclass_Ex2.html",
    "href": "Inclass_Ex2/Inclass_Ex2.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In this in-class exercise 2, we will use more visualisation packages that support many useful functions for our visualisation analysis. We will try them one by one.\n\ntidyverse\nggplot2\nggrepel\nggthemes\nhrbrthemes\npatchwork\n\n\n\nShow the code\npacman::p_load(tidyverse, ggplot2, ggrepel, ggthemes, hrbrthemes, patchwork)"
  },
  {
    "objectID": "Inclass_Ex2/Inclass_Ex2.html#data-used",
    "href": "Inclass_Ex2/Inclass_Ex2.html#data-used",
    "title": "In-class Exercise 2",
    "section": "2 Data used",
    "text": "2 Data used\nThe data used in this exercise is the exam data we have used many times. Let’s import the data table by using read_csv from tidyverse package.\n\n\nShow the code\nexam_data<-read_csv('data/Exam_data.csv')\n\n\n\n2.1 Plotting with ggplot\nFirstly, we can create a combined chart using functions in ggplot2 package, we will add the smooth line and labels to the scattered point plot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n2.2 Plotting with ggrepel\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n2.3 Adding ggplot2 themes\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n2.4 Using hrbrthemes package\n\n2.4.1 Background with vertical and horizontal grid\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n2.4.2 Background with only vertical grid\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15,\n              grid = \"Y\") \n\n\n\n\n\n\n\n\n3 Deploy multiple plots with patchwork package\n\n\nShow the code\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nShow the code\np1 + p2 / p3\n\n\n\n\n\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nShow the code\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Inclass_Ex3/Inclass_Ex3.html",
    "href": "Inclass_Ex3/Inclass_Ex3.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Show the code\npacman::p_load(ggiraph,plotly,gganimate,DT,tidyverse,patchwork)"
  },
  {
    "objectID": "Inclass_Ex3/Inclass_Ex3.html#data-used",
    "href": "Inclass_Ex3/Inclass_Ex3.html#data-used",
    "title": "In-class Exercise 3",
    "section": "Data used",
    "text": "Data used\nExam_data.csv will be used in this in-class exercise 3.\n\n\nShow the code\nexam_data<-read_csv('data/Exam_data.csv')\n\n\nWe then use function girafe of ggiraph package to plot an interactive chart.\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html",
    "href": "Inclass_Ex4/Inclass_Ex4.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "In this In-class exercise, we will explore more interesting packages to visualize data with statistical summary information shown in the plots."
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html#packages-used",
    "href": "Inclass_Ex4/Inclass_Ex4.html#packages-used",
    "title": "In-class Exercise 4",
    "section": "2 Packages used",
    "text": "2 Packages used\nPackages will be used in this exercise are:\n\nplotly\ntidyverse\nDT\npatchwork\nggstatsplot\nreadr\n\n\n\nShow the code\npacman::p_load(ggplot2, plotly, readr, tidyverse, DT, patchwork, ggstatsplot, readxl, see, parameters, performance, dplyr)"
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html#data-used",
    "href": "Inclass_Ex4/Inclass_Ex4.html#data-used",
    "title": "In-class Exercise 4",
    "section": "3 Data used",
    "text": "3 Data used\nData we will use in this exercise is Exam_data.csv, and we can import the data with codes chunk below.\n\n\nShow the code\nexam_data<-read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html#working-with-visual-variable-plot_ly-method",
    "href": "Inclass_Ex4/Inclass_Ex4.html#working-with-visual-variable-plot_ly-method",
    "title": "In-class Exercise 4",
    "section": "4 Working with visual variable: plot_ly() method",
    "text": "4 Working with visual variable: plot_ly() method\nToday we are going to explore the function plot_ly() to create an interactive plot.\n\n\nShow the code\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)"
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html#working-with-ggplotly-function",
    "href": "Inclass_Ex4/Inclass_Ex4.html#working-with-ggplotly-function",
    "title": "In-class Exercise 4",
    "section": "5 Working with ggplotly function",
    "text": "5 Working with ggplotly function\n\n\nShow the code\np<-ggplot(data = exam_data,\n          aes(x = MATHS,\n              y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p)"
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html#working-with-ggstatsplot-package",
    "href": "Inclass_Ex4/Inclass_Ex4.html#working-with-ggstatsplot-package",
    "title": "In-class Exercise 4",
    "section": "6 Working with ggstatsplot package",
    "text": "6 Working with ggstatsplot package\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  massages = FALSE\n)\n\n\n\n\n\n\n\nShow the code\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)"
  },
  {
    "objectID": "Inclass_Ex4/Inclass_Ex4.html#regression-modeling",
    "href": "Inclass_Ex4/Inclass_Ex4.html#regression-modeling",
    "title": "In-class Exercise 4",
    "section": "7 Regression modeling",
    "text": "7 Regression modeling\n\n\nShow the code\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\n\nShow the code\nmy_sum<-exam_data%>%\n  group_by(RACE)%>%\n  summarise(\n    n = n(),\n    mean = mean(MATHS),\n    sd = sd(MATHS)\n  )%>%\n  mutate(se = sd/sqrt(n-1))\n\n\n\n\nShow the code\nmodel<-lm(Price ~ Age_08_04 + Mfg_Year + KM +\n            Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nShow the code\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x = RACE,\n        ymin = mean - se,\n        ymax = mean + se),\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(aes(\n    x = RACE,\n    y = mean),\n    stat = \"identity\",\n    color = \"red\",\n    size = 1.5,\n    alpha = 1)\n\n\n\n\n\nShow the code\nmodel[[\"coefficients\"]]\n\n\n     (Intercept)        Age_08_04         Mfg_Year               KM \n   -2.636783e+06    -1.409333e+01     1.314938e+03    -2.323290e-02 \n          Weight Guarantee_Period \n    1.902743e+01     2.769708e+01"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html",
    "href": "Inclass_Ex5/Inclass_Ex5.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "The hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\n\n\nShow the code\npacman::p_load(tidyverse, ggtern, plotly)\n\n\n\n\n\nData of Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 will be used in this exercise.\n\n\nShow the code\npop_data<-read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n\n\n\nShow the code\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population)%>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)%>%\n  select(c(1,2,22,23,24,25))\n\nwrite_csv(agpop_mutated,\"data/agpop.csv\")\n\n\n\n\n\n\n\nShow the code\nagpop_mutated<-read_csv(\"data/agpop.csv\")\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\nShow the code\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\nShow the code\nlabel <- function(txt){\n  list(\n    text = txt,\n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\",\n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt){\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"),\n  baxis = axis(\"Active\"),\n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated,\n  a = ~YOUNG,\n  b = ~ACTIVE,\n  c = ~OLD,\n  color = I(\"black\"),\n  type = \"scatterternary\"\n)%>%\n  layout(\n    annotations = label(\"Ternary Markers\"),\n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#packages-used-2",
    "href": "Inclass_Ex5/Inclass_Ex5.html#packages-used-2",
    "title": "In-class Exercise 5",
    "section": "Packages used",
    "text": "Packages used\n\n\nShow the code\npacman::p_load(seriation, dendextend, heatmaply)"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#data-used-2",
    "href": "Inclass_Ex5/Inclass_Ex5.html#data-used-2",
    "title": "In-class Exercise 5",
    "section": "Data used",
    "text": "Data used\n\n\nShow the code\nwh <- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#prepare-data",
    "href": "Inclass_Ex5/Inclass_Ex5.html#prepare-data",
    "title": "In-class Exercise 5",
    "section": "Prepare data",
    "text": "Prepare data\nReplace the row name with country’s names.\n\n\nShow the code\nrow.names(wh) <- wh$Country\n\n\nTransform the data into matrix.\n\n\nShow the code\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#plotting-heat-maps",
    "href": "Inclass_Ex5/Inclass_Ex5.html#plotting-heat-maps",
    "title": "In-class Exercise 5",
    "section": "Plotting heat maps",
    "text": "Plotting heat maps\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix)\n\n\n\n\n\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\nShow the code\nheatmaply(mtcars)\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])   ##exclude column 1,2,4,5\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#packages-used-3",
    "href": "Inclass_Ex5/Inclass_Ex5.html#packages-used-3",
    "title": "In-class Exercise 5",
    "section": "Packages used",
    "text": "Packages used\n\n\nShow the code\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#data-used-3",
    "href": "Inclass_Ex5/Inclass_Ex5.html#data-used-3",
    "title": "In-class Exercise 5",
    "section": "Data used",
    "text": "Data used\nWHData-2018.csv will be used in this exercise.\n\n\nShow the code\nwh <- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#plotting-a-simple-parallel-coordinates",
    "href": "Inclass_Ex5/Inclass_Ex5.html#plotting-a-simple-parallel-coordinates",
    "title": "In-class Exercise 5",
    "section": "Plotting a simple parallel coordinates",
    "text": "Plotting a simple parallel coordinates\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#plotting-with-facet",
    "href": "Inclass_Ex5/Inclass_Ex5.html#plotting-with-facet",
    "title": "In-class Exercise 5",
    "section": "Plotting with facet",
    "text": "Plotting with facet\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#rotating-x-axis",
    "href": "Inclass_Ex5/Inclass_Ex5.html#rotating-x-axis",
    "title": "In-class Exercise 5",
    "section": "Rotating x-axis",
    "text": "Rotating x-axis\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#adjusting-x-label-text",
    "href": "Inclass_Ex5/Inclass_Ex5.html#adjusting-x-label-text",
    "title": "In-class Exercise 5",
    "section": "Adjusting x-label text",
    "text": "Adjusting x-label text\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#interactive-plot",
    "href": "Inclass_Ex5/Inclass_Ex5.html#interactive-plot",
    "title": "In-class Exercise 5",
    "section": "Interactive plot",
    "text": "Interactive plot\n\n\nShow the code\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nShow the code\nparallelPlot(wh,\n             rotateTitle = TRUE)  ##rotate axis label\n\n\n\n\n\n\n\n\nShow the code\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)  ##change the color scheme"
  },
  {
    "objectID": "Inclass_Ex5/Inclass_Ex5.html#parallel-coordinates-plot-with-histogram",
    "href": "Inclass_Ex5/Inclass_Ex5.html#parallel-coordinates-plot-with-histogram",
    "title": "In-class Exercise 5",
    "section": "Parallel coordinates plot with histogram",
    "text": "Parallel coordinates plot with histogram\n\n\nShow the code\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Inclass_Ex6/Inclass_Ex6.html",
    "href": "Inclass_Ex6/Inclass_Ex6.html",
    "title": "Inclass Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "Show the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, tidyverse, patchwork)"
  },
  {
    "objectID": "Inclass_Ex6/Inclass_Ex6.html#plotting-calendar-heatmap",
    "href": "Inclass_Ex6/Inclass_Ex6.html#plotting-calendar-heatmap",
    "title": "Inclass Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\n\nImporting data\n\n\nShow the code\nattacks<-read_csv(\"data/eventlog.csv\")\n\n\n\n\nExamining data structure\nUse kable() to review the data imported.\n\n\nShow the code\nkable(head(attacks))\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData preparation\nStep 1: Deriving weekday and hour of day fields.\n\n\nShow the code\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\n\nShow the code\nwkday_levels<-c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks<-attacks%>%\n  group_by(tz)%>%\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz))%>%\n  ungroup()%>%\n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour = factor(\n      hour, levels = 0:23))\n\n\n\n\nShow the code\nkable(head(attacks))\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Inclass_Ex6/Inclass_Ex6.html#building-the-calendar-heatmaps",
    "href": "Inclass_Ex6/Inclass_Ex6.html#building-the-calendar-heatmaps",
    "title": "Inclass Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Building the Calendar Heatmaps",
    "text": "Building the Calendar Heatmaps\n\n\nShow the code\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup()%>%\n  na.omit()\n\np1<-ggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\np2<-ggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \n#theme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\np1/p2\n\n\n\n\n\n\n\nShow the code\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\n\nShow the code\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Inclass_Ex6/Inclass_Ex6.html#cycle-plot",
    "href": "Inclass_Ex6/Inclass_Ex6.html#cycle-plot",
    "title": "Inclass Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\n\n\nShow the code\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nShow the code\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\n\nShow the code\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\n\nShow the code\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nShow the code\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 VAA",
    "section": "",
    "text": "This is a study journey about Visual Analytics and Applications. There are Hands-on Exercises, In-class Exercises and Take-home Exercises menus for you to explore. You can also explore my Github page and reach out to me via fyzhu.2022@mitb.smu.edu.sg. Let us get started to study with the author!!\nWelcome to leave your comments below if you have any questions or suggestions!"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take-home exercise 1, we will use the Age-sex pyramid through Tableau Desktop to visualise demographic structure of population of Singapore. And we will display nine selected planning areas on a single view by using trellis display."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#the-visualising-tool",
    "href": "Take-home_Ex1/Take-home_Ex1.html#the-visualising-tool",
    "title": "Take-home Exercise 1",
    "section": "2 The Visualising Tool",
    "text": "2 The Visualising Tool\nTableau Desktop"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#step-by-step-guide",
    "href": "Take-home_Ex1/Take-home_Ex1.html#step-by-step-guide",
    "title": "Take-home Exercise 1",
    "section": "3 Step-by-step Guide",
    "text": "3 Step-by-step Guide\n\nProcedures to designing visualisation\n\n\nProcedure\nStep 1\nCheck the csv and xls file named ‘Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022’ from Singstat.\nScreenshot\n\n\n\n\n\n\n\nStep 2\nFor files with the same content but differed forms, we should choose csv file for its smaller size and friendly readability to Tableau.\n\n\n\nStep 3\nBecause we use the data from the same year, so we don’t need the column named Time, for which all the rows are 2022. Therefore we can delete this column to get a cleaner data table. Then we save the file and name it ppl2022.csv.\n\n\n\nStep 4\nImp0ort the data into Tableau Desktop by opening the csv file just downloaded.\n\n\n\nStep 5\nIn the Data Source page, see that the data contains 6 fields: PA, SZ, AG, Sex, TOD, POP and Time and 100928 rows. Through checking the data type of the fields from the detail session, noted that data type of the columns named PA, SZ, AG, Sex and TOD are string, and column named Pop are Number (whole).\n\n\n\nStep 6\nChecking the Notes file for the data, we see the explanations of each column:\n\nPA - Planning Area\nSZ - Subzone\nAG - Age Group\nTOD - Type of Dwelling\nPop - Resident Count\n\n\n\n\nStep 7\nBefore we start analysing, we can check the raw data information by clicking the black triangle on the top right of the column and clicking Describe… For example, as shown in right, the column PA which means planning area has 55 items and no Null values. We can use the same method to check other columns we need, AG - age and Pop - population, and find no Null values in these columns.\n\n\n\nStep 8\nTo build a Age-sex pyramid chart, we need bins of the age. Information of the age column shows that the original data already has 19 bins of age, and the length of each bin is 4, which is quite standard for an Age-sex pyramid chart.\nAG | | Role: Discrete Dimension | | Type: Database column | | Remote column: [ppl2022.csv].[AG] | | Remote type: ANSI/MBCS character string | Contains NULL: No | | Locale: United States(English) | | Sort flags: Case-sensitive | | Column width: 11 | | Status: Valid | | Domain (19 members) | | 0_to_4 | | 10_to_14 | | 15_to_19 | | 20_to_24 | | 25_to_29 | | 30_to_34 | | 35_to_39 | | 40_to_44 | | 45_to_49 | | 5_to_9 | | 50_to_54 | | 55_to_59 | | 60_to_64 | | 65_to_69 | | 70_to_74 | | 75_to_79 | | 80_to_84 | | 85_to_89 | | 90_and_over |\n\n\nStep 9\nThen in the new worksheet, we drag the AG to the Row shelf.\n\n\n\nStep 10\nSelect Analysis > Create a Calculated Field, and enter Male Population. Then in the pane space, enter formula as shown in right to extract Male population from the Sex.\n\n\n\nStep 11\nAs shown on the right, we have Male population now.\n\n\n\nStep 12\nWe use the same way to extract female population as shown on the right.\n\n\n\nStep 13\nDrag the Male Population and Female Population to the Column shelf.\n\n\n\nStep 14\nClick the triangle of the PA in the Table shelf, open the filter option and select 1 planning area according to our task requirements.\n\n\n\nStep 15\nDrag the Sex to the color to embody different colors to the bar charts for each gender.\n\n\n\nStep 16\nAccording to the code of Age-sex pyramid, Female chart ought to be on the right side. Therefore, we can change the position of Female and Male axis by changing the location of Male Population and Female Population in the column shelf.\n\n\n\nStep 17\nNoted that the Female population has at least 19 null values, we can check the data by navigating to Analysis > View Data… Noted that because of the conditional statement we used to extract male population and female population, there will be Null values if the object does not fit the condition. We click on the button and choose the ‘Show data at default position’. So that all null values will be replaced by 0.\n\n\n\nStep 18\nThe next step to create the age-sex pyramid graph is to Right click the axis of Male population > Edit Axis > Reversed.\n\n\n\nStep 19\nThen we change the aesthetics of the chart. First we change the color of the bar chart by clicking color > Edit color under the Mark.\n\n\n\nStep 20\nLastly, we should sort the Y-axis as descending order. Right click beside the y axis > descending.\n\n\n\nStep 21\nDouble click the Title and change it to Ang Mo Kio Age-sex Pyramid.\n\n\n\nStep 22\nWe can remove the y label to make a tidier chart by right-clicking the y label > Hide Field Labels for Rows…\n\n\n\nStep 23\nWith the same steps, we create other 8 age-sex pyramid graphs for other planning areas and rename each worksheet.\n\n\n\nStep 24\nThen we drag all the age-sex pyramid into a new created Dashboard named A-S Pyramid, and adjust the size of the dashboard to 1800 px*1200 px.\n\n\n\nStep 25\nChange the scale name of the y axis\n\n\n\nStep 26\nWe also need to edit the Aliases of AG-age because the original aliases are very tedious. For example, we can change 0_to_4 to 0-4 and so on.\n\n\n\nStep 27\nRight-click the x label PA > Hide Field Labels for Rows… to remove the label for a tidier chart.\n\n\n\nStep 28\nThen we can drag the PA to the column shelf and the name of the planning area will appear on the top of the chart, so that we don’t need the title of the chart appear on the dashboard.\n\n\n\nStep 29\nNow we can hide the title in the dashboard with area name on the top of each plot by clicking the triangle of on the right of each sub plot > uncheck the Title.\n\n\n\nStep 30\nPut all the 9 charts together under the same x-axis range by right clicking the PA > Show filter and click the 9 areas we chose before."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#the-dashboard",
    "href": "Take-home_Ex1/Take-home_Ex1.html#the-dashboard",
    "title": "Take-home Exercise 1",
    "section": "4 The Dashboard",
    "text": "4 The Dashboard"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#discussion",
    "href": "Take-home_Ex1/Take-home_Ex1.html#discussion",
    "title": "Take-home Exercise 1",
    "section": "5 Discussion",
    "text": "5 Discussion\nWe personally chose 9 planning areas in Singapore and created their Age-sex pyamid and excluded those where population is 0, for example, Changi Bay.\n\nTaking a look at the real map, Changi Bay area is not a name of a continent, but a real bay, where there is no residency as shown in the screenshot below. Therefore we can basically confirm that there are no missing values.\n\nThe age-sex pyramid breaks down a location’s population into male and female genders and age ranges. The layout of our population pyramid shows male population on the left side and female population on the right side. There are mainly three basic types of population pyramids show how different trends are displayed. \n\nRapid Growth\n\nA population pyramid that is very wide at the younger ages, characteristic of countries with a high birth rate and perhaps low life expectancy. The population is said to be fast-growing, and the size of each birth cohort increases each year.\n\nSlow Growth\n\nA pyramid can be described as stationary if the percentages of population (age and sex) remain approximately constant over time. In a stationary population, the numbers of births and death roughly balance one another.\n\nNegative Growth\n\nA population pyramid that is narrowed at the bottom. The population is generally older on average, as the country has long life expectancy, a low death rate, but also a low birth rate. This may suggest that in future there may be a high dependency ratio due to reducing numbers at working ages. This is a typical pattern for a very developed country, with a high level of education, easy access to and incentive to use birth control, good health care, and few negative environmental factors.\n\n5.1 Type I\nType I structure has a cone shaped age-sex pyramid.\n\n5.1.1 Population structure of Ang Mo Kio\n\n\nIt is obvious that population structure in Ang Mo Kio area belongs to Negative Growth with a kiteshape, which also means low birth rate in this area.\nThe mode of the age group in this area is about 60-64. As shown in the age-sex pyramid chart, population with the most size is among 60-64 years, and this area has a huge number of elderly and middle-aged adults. With ages getting smaller or larger, population generally gets smaller.\nIn addition, the population of male and female is about equal. There are usually more females than males in the older age ranges since women have a greater life expectancy.\nThe chart has a relatively small base and skinny top, which means a low dependency rate in this area.\n\n\n\n5.1.2 Population structure of Queenstown\n\n\nSimilar to population structure in Ang Mo Kio, the one in Queenstown area also belongs to Negative Growth, but the total population is much less than that in Ang Mo Kio area.\nThe mode of the age group in this area is around 40-49 years old.\n\n\n\n5.1.3 Population structure of Jurong West\n\n\nAlso noted as Negative Growth, population in this area has a huge number of middle aged citizens.\nThe mode of the age group in this area is around 45-49 years old.\n\n\n\n5.1.4 Population structure of Toa Payoh\n\n\nWith small base and large size in the middle, population structure in this area is also Negative Growth.\nNumber of population between 30-34 year old is especially large in this area. It seems like many young adults like to live in this area.\nThe mode of the age group in this area is around 30-34 years old.\n\n\n\n\n5.2 Type II\nType II structure has a notch in the middle area.\n\n5.2.1 Population structure of Choa Chu Kang\n\n\nThe largest population belongs to 50-64 years old and 20-34 years old, seemingly that the fertility rate of the current generation is much lower than that of previous generations in this area, but this conclusion needs more evidence to prove it.\nHowever, the number of population under 20 years old and above 70 years old takes the smallest part of the total population. Therefore, this population structure also belongs to Negative Growth.\nThe mode of the age group in this area is around 25-29 years old, followed by 55-59 years old.\n\n\n\n5.2.2 Population structure of Yishun\n\n\nPopulation structure in this area is also Negative Growth structure with adults take the most part of the population and the small base.\nThe mode of the age group is around 30-34 years old.\n\n\n\n5.2.3 Population structure of Pasir Ris\n\n\nNegative Growth structure with adults take the most part of the population and the small base.\nEspecially high portions of population between 55-64 years old and 20-29 years old.\nLow dependency rate due to small number of children and elderly.\nThe mode of the age group is around 55-59 years old.\n\n\n\n5.2.4 Population structure of Novena\n\n\nNegative Growth structure with adults take the most part of the population and the small base.\nThe notch in this area locates in age group 20-24, and male kids are more than female kids.\nLow dependency rate due to small number of children and elderly.\nThe average age is around 34 years old.\n\n\n\n\n5.3 Type III\nThis type of population structure is based on a few population compared to other areas.\n\n5.3.1 Population structure of Changi\n\n\nNoted a quite asymmetrical shape between left and right parts due to the small total number of the population. The Changi area is around the Changi Airport so that the residency is quite few compared to other areas.\nGenerally this area has low fertility rate with a Negative Growth structure because its portions of kids and elderly are small compared to that of other age groups.\nThe mode of the age group in this area is around 10-14, 45-49 years old."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "title": "Take-home Exercise 1",
    "section": "6 Conclusion",
    "text": "6 Conclusion\n\n\n\n\n\n\n\n\nPlanning Area\nPopulation Structure\nMode of Age Group\n\n\n\n\nAng Mo Kio\nNegative Growth - kite shape\n60-64\n\n\nQueenstown\nNegative Growth - kite shape\n40-49\n\n\nJurong West\nNegative Growth - kite shape\n40-45\n\n\nToa Payoh\nNegative Growth\n30-34\n\n\nChoa Chu Kang\nNegative Growth - kite shape with a notch\n25-29\n\n\nYishun\nNegative Growth - kite shape with a notch\n30-34\n\n\nPasir Ris\nNegative Growth - kite shape with a notch\n55-59\n\n\nNovena\nNegative Growth - kite shape with a notch\n25-29\n\n\nChangi\nNegative Growth\n10-14, 45-49\n\n\n\nAll the population structures in these 9 areas are Negative Growth which generally means a low fertility rate. And all are of low dependency rate because of their small base for young residents and skinny top for elder ones. And according to the mode of the age group, we see most population in Ang Mo Kio is the oldest, followed by Pasir Ris. Most of the population in Novena and Chou Chu Kang are young adults.\n\nAs shown in a same x-axis scale, we can clearly see the total population size of each area. In our chosen areas, Jurong West has the largest size of population among others, followed by Yishun. Changi area has the smallest size of population."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Our tasks in this exercise is to:\n\nselect one of the Take-home Exercise 1 prepared by my classmate,\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design,\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#guide-of-critiques",
    "href": "Take-home_Ex2/Take-home_Ex2.html#guide-of-critiques",
    "title": "Take-home Exercise 2",
    "section": "2 Guide of Critiques",
    "text": "2 Guide of Critiques\nOur task of take-home exercise 1 is to plot age-sex pyramid for 9 planning areas. The guide of the task is to plot an audience-friendly and subject focused charts. Therefore, we can critique and improve our peer’s preparation from perspectives like clarity and aesthetics.\nTherefore, in this exercise, 3 codes below can serve as our references:\n\nDefinition\nAmplification\nSimplicity"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#original-design",
    "href": "Take-home_Ex2/Take-home_Ex2.html#original-design",
    "title": "Take-home Exercise 2",
    "section": "3 Original Design",
    "text": "3 Original Design"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#critiques",
    "href": "Take-home_Ex2/Take-home_Ex2.html#critiques",
    "title": "Take-home Exercise 2",
    "section": "4 Critiques",
    "text": "4 Critiques\n\n4.1 Critiques on definition\nThe definition of the chart is very clear as the title shows - ‘Demographic structure of Singapore at top 9 population planning areas in June 2022’.\n\n\n\n\n\n\n\n\nStatus\nIssues\nScreenshot\n\n\n\n\n🌟\nThe author chose the areas in purpose instead of randomly. That means the author is showing the patterns of population structure with a clear objective.\n\n\n\n🌟\nThe title shows clearly the chart type, which is Demographic structure.\n\n\n\n🌟\nThe title shows the time of the data collection, which is June 2022.\n\n\n\n❎\nThe standard population structure chart contains x-axis of Male population and Female population, and y-axis of age group. Normally, Female population is on the right side and Male’s on the left side. The author puts the structure chart in a reverse direction, which is okay but against the rule of thumb.\n\n\n\n❎\nThe range of each age group is normally 5 years such as 0-4, 5-9 and so on. Otherwise, the shape of the population structure may miss some important information. The range of group in the chart above is 10 years. Maybe better to switch to 5 years as the same as the raw data.\n\n\n\n\n\n\n4.2 Critiques on Amplification\n\n\n\n\n\n\n\n\nStatus\nIssue\nScreenshot\n\n\n\n\n🌟\nIt’s good that the author brings the audience’s focus just on the shape of each chart under a same range of x-axis, which is -40k to 40k, by not showing the exact number of population of each age group.\n\n\n\n🌟\nIt is very clear to draw the bar chart for different genders in different colors, red for female and blue for male.\n\n\n\n❎\nHowever, the range of y-axis is too large so that the shape is contacted.\n\n\n\n❎\nThere is a Column on top of the chart, and Female population and Male population as x-label at the bottom of the chart. So it is a little confusing.\n\n\n\n\n❎\nFor each small chart, the author puts the name of the planning area beside the bar of the age group with the most population. There may be some information the author intends to deliver like the age group with the most population, but it appears not very obvious.\n\n\n\n❎\nThe x-label retains the column name, AG, of the raw data frame, which is the short of age but no explanation here.\n\n\n\n\n\n\n4.3 Critiques on Simplification\n\n\n\n\n\n\n\n\nStatus\nIssue\nScreenshot\n\n\n\n\n🌟\nIt is good to configure the chart as 3*3 rows and columns. A visually comfortable and tidy deployment.\n\n\n\n❎\nThe aliases of the y-axis are a little tedious, which contains number, string and special character. It is better to simplify the aliases.\n\n\n\n❎\nThere are column numbers for the whole chart, which is tedious."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#remake-of-the-chart",
    "href": "Take-home_Ex2/Take-home_Ex2.html#remake-of-the-chart",
    "title": "Take-home Exercise 2",
    "section": "5 Remake of the Chart",
    "text": "5 Remake of the Chart\nIn accordance to issues we come up above, we are going to remake the chart to improve step by step.\n\n5.1 Importing the packages\nIn the exercise, we will mainly use packages as below:\n\nggplot2\ntidyverse\nggrepel\nggthemes\nhrbrthemes\npatchwork\n\n\n\nShow the code\npacman::p_load(ggplot2,tidyverse,ggrepel,ggthemes,hrbrthemes,patchwork,ggiraph)\n\n\n\n\n5.2 Importing the data\nFirst let us import the data of population in Singapore extracted from the Singstat. We will use the read_csv\n\n\nShow the code\npop<-read_csv(\"data/population.csv\")\n\n\nNoted from the information above, we have 100928 rows and 7 columns in this data frame. See the 7 columns are PA, SA, AG, Sex, TOD, Pop and Time, among which PA, SZ, AG, Sex and TODare character datatype and Pop and Time are double-precision floating-point format (dbl) data type.\n\n\n5.3 Glimpse the data\nLet us take a look at the data we imported to use later using code chunk below.\n\n\nShow the code\nhead(pop,10)\n\n\nOkay we see values of each column, like Ang Mo Kio in column Planning area, 0_to_4 in column AG, etc.\n\n\n5.4 Explanation of each column\n\nPA: Planning area\nSZ: Subzone\nAG: Age\nSex: Sex\nTOD: Type of dwelling\nPop: Population\nTime: Time, each value = June 2022\n\n\n\n5.5 Cleaning the data\n\n5.5.1 Extracting columns used\nAs we see from the data frame, there are 7 columns. Most of them won’t be used in this exercise. We need to therefore extract only columns of Planning area, Age, Sex and Pop, and write this new data table as ppl. And rename the Sex and Pop as SX and PP for more convenience.\n\n\nShow the code\nppl<-pop%>%\n  select(PA,AG,Sex,Pop)%>%\n  rename(SX = `Sex`)%>%\n  rename(PP = `Pop`)\n\n\n\n\n5.5.2 Checking missing values\nBefore we use the data, we should first check if there are any missing values using codes below.\n\n\nShow the code\nsummary(ppl[rowSums(is.na(ppl))!=0,])\n\n\nFrom the information above, we see no missing values in this data table.\n\n\n5.5.3 Aggregate the data\n\n\nShow the code\nprop<-ppl%>%\n  group_by(`PA`, `SX`, `AG`)%>%\n  summarise(\"Subsum\" = sum(PP))\n\nwrite_csv(prop,\"data/prop.csv\")\n\n\n\n\nWe see that the size of the new data table is much smaller than the raw data.✨\n\n\n5.5.4 Create new columns\nThen we can create a new column which shows percentage of population belonging to each age group for male and female in each planning area, instead of only the exact number of the population.\nFirst, we need to use codes below to compute the sum of population of each gender in a spacific planning area.\n\n\nShow the code\nprop<-read_csv(\"data/prop.csv\")\nppsum<-prop%>%\n  group_by(`PA`, `SX`)%>%\n  summarise(\"SUM\" = sum(Subsum))\n\n\nThen let us just combine the new data table named ppsum with data table named prop by planning area and sex using code chunk below.\n\n\nShow the code\npct<-merge(prop, ppsum, by = c(\"PA\", \"SX\"))\n\n\nWe can noe create the new column named PCT using code chunk below and have a look at the new data table.\n\n\nShow the code\npct<-pct%>%\n  mutate(\"PCT\" = paste(as.character(signif(Subsum/SUM*100,2)),\"%\"))\n\nhead(pct,10)\n\n\n           PA      SX       AG Subsum   SUM   PCT\n1  Ang Mo Kio Females   0_to_4   2480 84410 2.9 %\n2  Ang Mo Kio Females 10_to_14   3320 84410 3.9 %\n3  Ang Mo Kio Females 15_to_19   3620 84410 4.3 %\n4  Ang Mo Kio Females 20_to_24   4030 84410 4.8 %\n5  Ang Mo Kio Females 25_to_29   5020 84410 5.9 %\n6  Ang Mo Kio Females 30_to_34   5650 84410 6.7 %\n7  Ang Mo Kio Females 35_to_39   5120 84410 6.1 %\n8  Ang Mo Kio Females 40_to_44   5970 84410 7.1 %\n9  Ang Mo Kio Females 45_to_49   6350 84410 7.5 %\n10 Ang Mo Kio Females   5_to_9   3120 84410 3.7 %\n\n\nWe see that we have new column named PCT in the most right of the data table, which shows the percentage of population from each age group of female or male in a planning area.\n\n\n\n5.6 Data preparation\n\n5.6.1 Extracting top 9 population planning areas\nIn accordance to the author’s intention, we need to find out the top 9 population planning areas. Code chunk below will help us achieve this objective.\n\n\nShow the code\ntail(\n  pct%>%\n  group_by(PA)%>%\n    summarise(\"SPP\"=sum(SUM))%>%\n  arrange(SPP,FALSE),\n  9)\n\n\n# A tibble: 9 × 2\n  PA                SPP\n  <chr>           <dbl>\n1 Punggol       3539130\n2 Choa Chu Kang 3616270\n3 Yishun        4236240\n4 Hougang       4323260\n5 Woodlands     4797690\n6 Sengkang      4809280\n7 Jurong West   4912260\n8 Tampines      5048110\n9 Bedok         5294160\n\n\nAs shown in chart above, Bedok, Tampines, Jurong West, Sengkang, Woodlands, Hougang, Yishun, Choa Chu Kang and Punggol are the top 9 population planning areas.\n\n\n5.6.2 Recoding of the column AG\nIn order to better sort the x-axis, we recode the values in column AG as the cutting years, 0, 5, 10, …, 90 using below codes.\n\n\nShow the code\npct<-pct%>%\n  mutate(AG = recode(AG, \"0_to_4\" = 0, \"5_to_9\" = 5, \"10_to_14\" = 10, \"15_to_19\" = 15, \"20_to_24\" = 20, \"25_to_29\" = 25, \"30_to_34\" = 30, \"35_to_39\" = 35, \"40_to_44\" = 40, \"45_to_49\" = 45, \"50_to_54\" = 50, \"55_to_59\" = 55, \"60_to_64\" = 60, \"65_to_69\" = 65, \"70_to_74\" = 70, \"75_to_79\" = 75, \"80_to_84\" = 80, \"85_to_89\" = 85,\"90_and_over\" = 90))\n\n\n\n\n5.6.3 Review and improvement of the issues\nIn our revised plot, we need to fix issues we found before step by step.\n\nAdjust the bar chart of Male population to the left side and that of Female to the right side.\nChange the range of each age group to 5 years.\nChange the range of y-axis from 0 - 4k to 0 - 2k.\nDelete tedious labels like column and Female population and Male population.\nPut the name of each planning area on the top of the chart.\nSwitch the x-label from AG to Age Group.\nRecode the age group aliases to the cutting of years.\n\n\n\n5.6.4 Adding new functions\nFrom the foundation of the author’s plot, we can add new more functions to the plot, such as interaction, background and legend.\n🎁 To make the plot more amplified, we don’t put the exact number of population to the bar chart. We can add an interactive labels showing instead of the number, but the percentage of the population for each age group among the total when putting the tick on a specific bar.\n🎁 Adding a grey background with x-y grid as reference lines.\n🎁 Offering a legend showing colors denoting Female and Male.\n🎁 Adding a note for the audience to explore the interactive function.\n🎁 Adding a subtitle to shorten the main title."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#plotting-age-sex-pyramid",
    "href": "Take-home_Ex2/Take-home_Ex2.html#plotting-age-sex-pyramid",
    "title": "Take-home Exercise 2",
    "section": "6 Plotting age-sex pyramid",
    "text": "6 Plotting age-sex pyramid\nNow we can plot the chart using code chunk below.\n\n\nShow the code\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\"\n\np<-pct%>%\n  filter(`PA` %in%\n           c(\"Bedok\",\"Tampines\", \"Jurong West\", \"Sengkang\", \"Woodlands\", \"Hougang\", \"Yishun\", \"Choa Chu Kang\", \"Punggol\"))%>%\n  mutate(Subsum = ifelse(SX == \"Males\", Subsum*(-1), Subsum*1))%>%\n    ggplot(aes(x = factor(AG), y = Subsum, fill = SX)) +\n    geom_bar_interactive(\n      aes(tooltip = PCT),\n      stat = \"identity\") +\n  facet_wrap(~ PA) +\n  scale_y_continuous(labels = paste0(as.character(c(seq(3, 0, -1), seq(1, 3, 1))), \"k\")) +\n    coord_flip() +\n  theme(axis.text.x=element_text(angle=0)) +\n    labs(title = \"Demographic Structure Pyramid\",\n         subtitle = \"of top 9 population planning areas in SG (June 2022, data sorce: SingStat)\",\n         caption = \"Note: \\n Put your mouse on the bar to see the No. of population as percentage of the total population within a gender\",\n         x = \"Age \\n Group\",\n         y = \"No. of Population\")+\n    theme_grey()+\n  theme(panel.grid.major = element_blank()) +\n    guides(fill=guide_legend(title = \"\"),\n           shape=guide_legend(override.aes = list(size=0.5)))+\n    theme(plot.title = element_text(size=13, face = \"bold\"),\n          plot.subtitle = element_text(size = 10, face = \"italic\"),\n          legend.title = element_text(size=7),\n          legend.text = element_text(size=5),\n          axis.title.y=element_text(angle=0, size = 7),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text(size = 7),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.ticks.y = element_line(size = 0.5, color = \"grey\"),\n          plot.caption = element_text(hjust = 0, colour = \"blue\", face = \"italic\"))\n\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 8,                         \n  height_svg = 8*0.8,\n  options = list(                        \n    opts_tooltip(\n      css = tooltip_css)))"
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html",
    "href": "Take-home_Ex3/Take-home_Ex3.html",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "",
    "text": "In this take-home exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. The study period should be on 2022."
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html#data-used",
    "href": "Take-home_Ex3/Take-home_Ex3.html#data-used",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "2 Data Used",
    "text": "2 Data Used\nResale flat prices based on registration date from Jan-2017 onwards will be used to prepare the analytical visualisation. It is available at Data.gov.sg."
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html#the-designing-tools",
    "href": "Take-home_Ex3/Take-home_Ex3.html#the-designing-tools",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "3 The Designing Tools",
    "text": "3 The Designing Tools\nTo achieve the purposes in this exercise, R packages tidyverse, tidyr and their extension will be used. Code chunk below will help us load these packages into R studio environment.\n\ntidyverse : ggplot2(), readr(), dplyr()\ntidyr\nggstatsplot: plotting with statistic features\nfunModeling: freq()\nplotly: interactive plotting\nungeviz\ngganimate: animate plotting\nDT: interactive datatable\npatchwork: layout of figures\nggdist\nggpubr\npsych\nperformance: check_linear\n\n\n\nShow the code\npacman::p_load(tidyverse, tidyr, ggstatsplot, funModeling, plotly, ungeviz, gganimate, DT, patchwork, ggdist, ggpubr, psych, performance)"
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html#data-preparation",
    "href": "Take-home_Ex3/Take-home_Ex3.html#data-preparation",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "4 Data Preparation",
    "text": "4 Data Preparation\n\n4.1 Importing data\nFirst, let us import the data in CSV form into R environment using code chunk below.\n\n\nShow the code\ndata<-read_csv(\"data/resale-flat-prices.csv\")\n\n\nAs information shows above, this data set includes 146701 rows and 11 columns. Let take a closer look at the data set by using code chunk below.\n\n\nShow the code\nglimpse(data)\n\n\n\n\n\n4.2 Data cleaning\nSee that the time is stored in character type, and we need to extract data only in 2022. Therefore, we need to first extract on the year number to recode the original data as shown below.\n\n\nShow the code\ndata$month<-str_extract(data$month,\"(\\\\d+)\")\n\n\nNow let us check the data column month.\n\n\nShow the code\nhead(data$month,10)\n\n\n\nIn addition, the remaining_lease no needs to contain month information, so we recode the values in the column to only retain its year part. See in code chunk below.\n\n\nShow the code\ndata$remaining_lease<-as.numeric(str_extract(data$remaining_lease,\"(\\\\d+)\"))\n\n\nSee only year number is retained. Now let us filter the data frame by filtering data only in 2022.\n\n\nShow the code\ndata<-data%>%\n  filter(month == \"2022\")\n\n\nNext we need to only focus on 3 ROOM, 4 ROOM and 5 ROOM, so let first look at how many types are there of flat_type column. We use freq() function of funModeling package to draw the frequency graph of this column.\n\n\nShow the code\nfreq(data$flat_type)\n\n\n\nNoted that 4 ROOM type takes the most part of the total, followed by 5 ROOM and 3 ROOM. Now let us delete the redundant column month and block as shown below, and write a new data frame named resale-flat2022.csv to contract the data size.\n\n\nShow the code\ndata<-data%>%\n  filter(flat_type%in%\n           c(\"3 ROOM\",\n             \"4 ROOM\",\n             \"5 ROOM\"))%>%\n  select(-1,-4)\n\n\nNow take a quick glimpse we can find that the variable lease_commence_date and remaining_lease have high association. We can plot an association plot to check their relationship.\n\n\nShow the code\nggscatterstats(\n  data = data,\n  x = lease_commence_date,\n  y = remaining_lease,\n  marginal = FALSE,\n  )\n\n\n\nAs shown in plot above, we see that these two variables have complete association with the test result r = 1. Therefore, we can just delete one column of them. Let us delete the column named remaining_lease.\n\n\nShow the code\ndata<-data%>%\n  select(-8)\n\nwrite_csv(data,\"data/resale-flat2022.csv\")\n\n\n\n\nNoted that the data size has been contacted to 1.6 MB.\n\n\n4.3 Missing value checking\nBefore we start our analysis, we should first check missing values in this data table. Code chunk below will be used to show us the length of missing values in all columns in this data table.\n\n\nShow the code\ndata<-read_csv(\"data/resale-flat2022.csv\")\nsummary(data[rowSums(is.na(data))!=0,])\n\n\n     town            flat_type         street_name        storey_range      \n Length:0           Length:0           Length:0           Length:0          \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n floor_area_sqm  flat_model        lease_commence_date  resale_price\n Min.   : NA    Length:0           Min.   : NA         Min.   : NA  \n 1st Qu.: NA    Class :character   1st Qu.: NA         1st Qu.: NA  \n Median : NA    Mode  :character   Median : NA         Median : NA  \n Mean   :NaN                       Mean   :NaN         Mean   :NaN  \n 3rd Qu.: NA                       3rd Qu.: NA         3rd Qu.: NA  \n Max.   : NA                       Max.   : NA         Max.   : NA  \n\n\nAs shown in table above, no missing values in this data table.\n\n\n4.4 Creating new variables\nTo remove the influence from area of a flat to its resale price, we create a new variable of resale price per sqm, and we name it as resale_price_per.\n\n\nShow the code\ndata<-data%>%\n  mutate(`resale_price_per` = resale_price/floor_area_sqm)\n\nsummary(data$resale_price_per)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3333    4838    5368    5736    6176   14731 \n\n\nNoted that the scale of the new created column is changed to 3333 to 14731."
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html#visualization-analysis",
    "href": "Take-home_Ex3/Take-home_Ex3.html#visualization-analysis",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "5 Visualization Analysis",
    "text": "5 Visualization Analysis\n\n5.1 Exploratory descriptive analysis\nFirst of all, let us do our EDA with our variables. This step plays a critical role to show the potential patterns behind the data. Let’s go!🥳\n\n\n5.2 Distribution test\nFirst of all, let take a look at the distribution of dependent variable resale_price_per by plotting its histogram plot using codes below.\n\n\nShow the code\np<-ggplot(data = data,\n       aes(resale_price_per,\n           tooltip = flat_model))+\n  geom_histogram(binwidth = 50)\n  labs(x = \"Resale Price/Sqm\",\n       title = \"Distribution of Resale Price/Sqm \\nby Flat Model\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\n\nNULL\n\n\nShow the code\nggplotly(p, width = 7.59, height = 4.68)\n\n\n\n\n\n\nAs shown in graph above, we see that the resale price per sqm is highly right skewed. According to the information of outliers, flat model of Type S1 has very high resale price per sqm. That means most of the resale price per sqm congregated at lower prices, which is intuitively rational.\nNow let us test if it fits normal distribution though we can guess it doesn’t.\n\n\nShow the code\nqqnorm(data$resale_price_per)\nqqline(data$resale_price_per)\n\n\n\nAlso it shows that it’s good to use non-parametric test because it’s better to use medium to represent our sample. Even though we have large enough data set, we don’t assume the distribution of resale price per sqm conforming to normal distribution, that’s why we use Bayes test.\n\n\nShow the code\ngghistostats(\n  data = data,\n  x = resale_price_per,\n  type = \"by\",\n  test.value = 60,\n  xlab = \"Resale Price Per Sqm\"\n)+\n  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))\n\n\n\nNote that the ln(BF01) = -inf, we get a posterior difference of 5675.88, with Confidence Interval = [5658.63, 5692.95]. Next let us take a look at the distribution of town, to see the sample capacity of each town.\n\n\nShow the code\nreorder_size <- function(x) {\n        factor(x, levels = names(sort(table(x), decreasing = TRUE)))}\n\np<-ggplot(data = data,\n       aes(x = reorder_size(town),\n       fill = flat_type))+\n  geom_bar(color = \"black\",\n           alpha = 0.8)+\n  labs(x = \"Town\",\n    title = \"Distribution of Town\",\n    subtitle = \"Fill by Flat Type\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\nggplotly(p, width = 7.59, height = 4.68)\n\n\n\n\n\n\nSee that BUKITTIMAH has the least amount of 52 samples.\n\n\nShow the code\nreorder_size <- function(x) {\n        factor(x, levels = names(sort(table(x), decreasing = TRUE)))}\n\np<-ggplot(data = data,\n       aes(x = reorder_size(flat_model),\n       fill = flat_type))+\n  geom_bar(color = \"black\",\n           alpha = 0.8)+\n  labs(x = \"Flat Model\",\n    title = \"Distribution of Flat Model\",\n    subtitle = \"Fill by Flat Type\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\nggplotly(p, width = 7.59, height = 4.68)\n\n\n\n\n\n\nWith the distribution plot for flat_model, we see that flat model named Improved-Maisonette only has 2 sample flats with 5 rooms in total. Also we can see the main flat type for each model of flat. For example, flats of Model A mainly have 4 rooms, and flats of Improved mainly have 5 rooms.\nLet us also take a look at the proportion of storey range for each model of flat.\n\n\nShow the code\nreorder_size <- function(x) {\n        factor(x, levels = names(sort(table(x), decreasing = TRUE)))}\n\np<-ggplot(data = data,\n       aes(x = reorder_size(flat_model),\n       fill = storey_range))+\n  geom_bar(color = \"black\",\n           alpha = 0.8)+\n  labs(x = \"Flat Model\",\n    title = \"Distribution of Flat Model\",\n    subtitle = \"Fill by Flat Type\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\nggplotly(p, width = 7.59, height = 4.68)\n\n\n\n\n\n\nIt shows that for each model of flat, there are feature storey ranges. Some covers many storey ranges, while others are quite congregated,"
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html#visual-statistical-testing",
    "href": "Take-home_Ex3/Take-home_Ex3.html#visual-statistical-testing",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "6 Visual statistical testing",
    "text": "6 Visual statistical testing\n\n6.1 Distribution test\nFirst let us see the distribution of flat type using code chunk below.\n\n\nShow the code\nggplot(data = data,\n       aes(resale_price_per))+\n  geom_histogram(binwidth = 50)+\n  facet_grid(~ flat_type)+\n  labs(x = \"Resale Price/Sqm\",\n       title = \"Distribution of Resale Price/Sqm \\nby Flat Type\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\n\n\nNoted that the resale price/sqm for each flat type is also right skewed. Even if we remove those outliers, it cannot be symmetrical. let us do non-parametric testing for them. Indeed, we can also test the normal distribution by using Q-Q plot. qqnorm()and qqline()from psych package will be used.\n\n\nShow the code\nqqnorm(data[data$flat_type==\"3 ROOM\",]$resale_price_per)\n\nqqline(data[data$flat_type==\"3 ROOM\",]$resale_price_per)\n\nqqnorm(data[data$flat_type==\"4 ROOM\",]$resale_price_per)\nqqline(data[data$flat_type==\"4 ROOM\",]$resale_price_per)\n\nqqnorm(data[data$flat_type==\"5 ROOM\",]$resale_price_per)\nqqline(data[data$flat_type==\"5 ROOM\",]$resale_price_per)\n\n\n\n\n\nNoted that these three distributions don’t fit normal distributions. Therefore, let’s test their distributions with Bayes test.\n\n\nShow the code\np1<-gghistostats(\n  data = data[data$flat_type==\"3 ROOM\",],\n  x = resale_price_per,\n  type = \"by\",\n  test.value = 60,\n  xlab = \"Resale Price Per Sqm\"\n)+\n  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))\n\np2<-gghistostats(\n  data = data[data$flat_type==\"4 ROOM\",],\n  x = resale_price_per,\n  type = \"by\",\n  test.value = 60,\n  xlab = \"Resale Price Per Sqm\"\n)+\n  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))\n\np3<-gghistostats(\n  data = data[data$flat_type==\"5 ROOM\",],\n  x = resale_price_per,\n  type = \"by\",\n  test.value = 60,\n  xlab = \"Resale Price Per Sqm\"\n)+\n  scale_x_continuous(breaks = seq(0,max(data$resale_price_per), by = 1000))+\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100))\n\nggarrange(p1+ rremove(\"x.text\"), p2 + rremove(\"x.text\"), p3 + rremove(\"x.text\"),ncol = 1)\n\n\n\nNoted that all the mean resale price/sqm for flats with 3 ROOM, 4 ROOM and 5 ROOM is 5670.22, 5766.91 and 5526.43 respectively, with Confidence Interval = [5640.72, 5700.93], [5739.76, 5793.93] and [5495.52, 5556.27] respectively.\n\n\n6.2 Visualizing uncertainty\nA point estimate is a single number, such as a mean. And uncertainty is expressed as standard error, confidence interval, or confidence interval. Now let’s plot interactive error bar plots by using 💼ggplot2() package to indicate the 95% confidence interval of mean resale price for different towns.\nFirst of all, we need statistical features of the columns we care about.\n\ngroup the observation by town,\ncomputes the count of observations, mean, standard deviation and standard error of resale_price by town, and\nsave the output as a tibble data table called sum_tbl.\n\n\n\nShow the code\nsum_tbl <- data %>%\n  group_by(town) %>%\n  summarise(\n    n=n(),\n    mean=mean(resale_price_per),\n    sd=sd(resale_price_per)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\nShow the code\np<-ggplot(sum_tbl) +\n  geom_errorbar(aes(x=town, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.95, \n    size=0.5) +\n  geom_point(aes\n           (x=town, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  geom_hline(yintercept = mean(data$resale_price_per),\n             linetype = \"dashed\",\n             color = \"blue\")+\n  ggtitle(\"Standard error of mean Resale Price/Sqm by Town\")+\n  labs(x = \"Town\", y = \"Mean\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=0, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1),\n          plot.caption = element_text(hjust = 0, colour = \"blue\", face = \"italic\"))\n\nggplotly(p, width = 7.59, height = 4.68)\n\n\n\n\n\n\nFrom the above plot, we can easily see that the mean resale price per sqm for all towns are above 5736 SG Dollar, but in some towns it is quite dispersed. For example, the town CENTRAL AREA has the highest mean resale price of about 8410 SG Dollar, but the range of Uncertainty is also large. On the other hand, towns like WOODLANDS and JURONG WEST have relatively low resale prices per sqm, but the standard error or their uncertainty is also small.\nGenerally, towns whose mean resale price is above the gross mean resale price have relatively large standard error, while whose mean resale price is under the gross mean resale price have relatively small standard error. 🤓\nNow let us use a more convenient way of ggdist() package to plot error bar with 95% confidence interval for other variables, which are flat_type, street_name, storey_range, and flat_model.\n\n\nShow the code\ndata %>%\n  ggplot(aes(x = flat_type, \n             y = resale_price_per)) +\n  stat_gradientinterval(   \n    fill = \"bisque3\",\n    p_limits = c(0.025, 0.975),\n    show.legend = TRUE     \n  ) +\n  geom_hline(yintercept = mean(data$resale_price_per),\n             linetype = \"dashed\",\n             color = \"blue\")+\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100000))+\n  labs(\n    title = \"Visualising confidence intervals of mean Resale Price per Sqm \\nby Flat type\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\nFrom the chart above, we can easily see that the mean resale price per sqm is almost the same for each type of flat. But through the extent of shade of colors, we can see that there are subtle differences in standard error for resale price per sqm of these 3 types. For flat with 3 rooms, the mean resale price per sqm is relatively congregated than other two types.\n\n\nShow the code\ndata %>%\n  ggplot(aes(x = storey_range, \n             y = resale_price_per)) +\n  stat_gradientinterval(   \n    fill = \"bisque3\",\n    p_limits = c(0.025, 0.975),\n    show.legend = TRUE     \n  ) +\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100000))+\n  geom_hline(yintercept = mean(data$resale_price_per),\n             linetype = \"dashed\",\n             color = \"blue\")+\n  labs(\n    title = \"Visualising confidence intervals of mean Resale Price/Sqm \\nby Storey Range\",\n    subtitle = \"Gradient + interval plot\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\n\n\nAs shown in the above chart, we easily see that as the storey rises, the mean resale price per sqm is higher. In addition, the standard error of mean resale price per sqm of storey range from 16 to 27 is the largest among other storey ranges. And we can see that flats with storey above 13 are more expensive than the gross mean resale price per sqm.\nNow let us take a look at the pattern within flat_model\n\n\nShow the code\ndata %>%\n  ggplot(aes(x = reorder(flat_model,\n                        resale_price_per,\n                        FUN = mean), \n             y = resale_price_per)) +\n  stat_gradientinterval(   \n    fill = \"bisque3\",\n    p_limits = c(0.025, 0.975),\n    show.legend = TRUE     \n  ) +\n  scale_y_continuous(breaks = seq(0,max(data$resale_price_per), by = 100000))+\n  geom_hline(yintercept = mean(data$resale_price_per),\n             linetype = \"dashed\",\n             color = \"blue\")+\n  labs(\n    title = \"Visualising confidence intervals of mean Resale Price/Sqm \\nby Flat Model\",\n    subtitle = \"Gradient + interval plot\")+\n  theme(plot.title = element_text(size=13, face = \"bold\"),\n          axis.title.y=element_text(angle=90, size = 9),\n          axis.title.y.left = element_text(vjust = 0.5),\n          axis.title.x.bottom = element_text( size = 9),\n          axis.text.y = element_text(size = 5,vjust = 1),\n          axis.text.x = element_text(angle = 45,size = 5, hjust = 1))\n\n\n\nFrom chart above, it is easily to tell that the flat model named Type S1 has the highest mean resale price per sqm among others, with relatively large standard error. And flat with model named Model A2 has the lowest mean resale price per sqm among others, with relatively small standard error.\nWhen we talk about visualizing uncertainty, though, we usually mean visualizing information about different values the data could plausibly be. Therefore, we can usually give a certain percentage of confidence for the audiences to see the interval of the average value for a specific variable, and we can also offer the audiences a friendly animation to see the resale price for different type of flat - 3 ROOM, 4 ROOM and 5 ROOM - when we sampling 5 times.\n\n\nShow the code\np<-ggplot(data = data, \n       (aes(x = factor(flat_type), \n            y = resale_price))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(5, \n                             group = flat_type), \n              color = \"#D55E00\") +\n  theme_bw()+\n  transition_states(.draw)\n\n\n\n\n6.3 Visual time series analysis\nAt last, let us take a look at the pattern between mean resale price per sqm and lease commence year, which is a time series graph and let us line chart instead of error bar plot.\n\n\nShow the code\np<-ggplot(data = data,\n       aes(x = lease_commence_date,\n           y = resale_price_per))+\n  geom_line(stat = \"summary\",\n            fun.y = \"mean\")+\n  geom_hline(yintercept = mean(data$resale_price_per),\n             linetype = \"dashed\",\n             color = \"blue\")+\n  scale_x_continuous(breaks = seq(min(data$lease_commence_date),max(data$resale_price_per), by = 5))+\n  labs(x = \"Lease Commence Year\",\n       y = \"Mean Resale Price/Sqm\",\n       title = \"Line plot of Mean Resale Price/Sqm \\nvs. Lease Commence Year \")\n\nggplotly(p, width = 7.59, height = 4.68)\n\n\n\n\n\n\nNoted that across the past 50 years, the gross mean resale price per sqm is showing a rising tendency. But in short period, from year 1975, the mean resale price per sqm is dropping down until year 1991. And a sharp increase in year 2006, followed by dramatic fluctuations in later years, reaching highest point of 9049 in year 2011.\n\n\n6.4 Visual association of resale price/sqm vs. floor area\nNow let us explore the association between mean resale price/sqm and floor area by plotting a scatter plot.\n\n\nShow the code\nggplot(data = data,\n       aes(x = floor_area_sqm,\n           y = resale_price_per))+\n  geom_point(aes(color = flat_type), alpha = 0.8)+\n  geom_smooth(method = \"lm\",\n              color = \"black\")\n\n\n\nFrom this combined chart above, we see that the area of floor is basically aligned with number of rooms of a flat, meaning that the differences between average area of each room among flats are not much big. On the other hand, as the area of floor rises, the resale price per sqm actually goes down.\n\n\n6.5 One-way ANOVA Test\nAs shown above visual analysis, we see that the mean resale prices per sqm for flat type are quite the same. Therefore, we can use One-way ANOVA Test to see whether the assumption is true. Because we have tested the distribution of these 3 samples that they don’t conform to normal distribution, we choose the type of “robust” as our testing method to test if the means of 3 groups are the same.\nReference to ggbetweenstats().\n\n\nShow the code\nggbetweenstats(\n  data = data,\n  x = flat_type, \n  y = resale_price_per,\n  type = \"robust\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\nThe testing result shows a very small p-value < 0.05 and small F-value of 51.27, which means that we have enough evident to reject the H0 that the mean of each class in this group are equal. In fact, the mean resale price per sqm of flat with 3 rooms is higher than that with 4 rooms, which is higher than that with 5 rooms."
  },
  {
    "objectID": "Take-home_Ex3/Take-home_Ex3.html#linear-regression-modeling",
    "href": "Take-home_Ex3/Take-home_Ex3.html#linear-regression-modeling",
    "title": "Take-home Exercise 3: Resale Flat Prices Analytical Visualisation",
    "section": "7 Linear Regression Modeling",
    "text": "7 Linear Regression Modeling\nAfter the former tests, we have noticed that the distribution of resale price per sqm is highly skewed, let’s see if the skewness can be reduced by data transformation. let us first try Log.\n\n\nShow the code\nqqnorm(log(data$resale_price_per))\nqqline(log(data$resale_price_per))\n\n\n\nNoted that the data gets less skewed after transforming.\n\n\nShow the code\nmodel<-lm(log(resale_price_per) ~ town + flat_type + storey_range +\n            floor_area_sqm + flat_model + lease_commence_date, data = data)\nmodel\n\n\n\nCall:\nlm(formula = log(resale_price_per) ~ town + flat_type + storey_range + \n    floor_area_sqm + flat_model + lease_commence_date, data = data)\n\nCoefficients:\n                     (Intercept)                         townBEDOK  \n                      -10.979633                         -0.037427  \n                      townBISHAN                   townBUKIT BATOK  \n                        0.148122                         -0.129083  \n                 townBUKIT MERAH                 townBUKIT PANJANG  \n                        0.151931                         -0.223592  \n                 townBUKIT TIMAH                  townCENTRAL AREA  \n                        0.280574                          0.238504  \n               townCHOA CHU KANG                      townCLEMENTI  \n                       -0.268768                          0.038828  \n                     townGEYLANG                       townHOUGANG  \n                        0.060106                         -0.124628  \n                 townJURONG EAST                   townJURONG WEST  \n                       -0.143714                         -0.218121  \n             townKALLANG/WHAMPOA                 townMARINE PARADE  \n                        0.102745                          0.242429  \n                   townPASIR RIS                       townPUNGGOL  \n                       -0.144754                         -0.214157  \n                  townQUEENSTOWN                     townSEMBAWANG  \n                        0.159496                         -0.245741  \n                    townSENGKANG                     townSERANGOON  \n                       -0.230507                          0.026531  \n                    townTAMPINES                     townTOA PAYOH  \n                       -0.065549                          0.078035  \n                   townWOODLANDS                        townYISHUN  \n                       -0.247508                         -0.186643  \n                 flat_type4 ROOM                   flat_type5 ROOM  \n                       -0.002177                          0.041935  \n            storey_range04 TO 06              storey_range07 TO 09  \n                        0.035890                          0.063571  \n            storey_range10 TO 12              storey_range13 TO 15  \n                        0.076709                          0.093062  \n            storey_range16 TO 18              storey_range19 TO 21  \n                        0.123525                          0.159007  \n            storey_range22 TO 24              storey_range25 TO 27  \n                        0.175038                          0.190407  \n            storey_range28 TO 30              storey_range31 TO 33  \n                        0.226439                          0.224940  \n            storey_range34 TO 36              storey_range37 TO 39  \n                        0.238527                          0.246890  \n            storey_range40 TO 42              storey_range43 TO 45  \n                        0.261197                          0.280566  \n            storey_range46 TO 48              storey_range49 TO 51  \n                        0.337007                          0.294680  \n                  floor_area_sqm           flat_modelAdjoined flat  \n                       -0.001844                          0.034265  \n                  flat_modelDBSS                flat_modelImproved  \n                        0.155459                         -0.020528  \n   flat_modelImproved-Maisonette                 flat_modelModel A  \n                        0.289286                         -0.006284  \n    flat_modelModel A-Maisonette                flat_modelModel A2  \n                        0.188842                          0.004516  \n        flat_modelNew Generation       flat_modelPremium Apartment  \n                        0.022547                          0.018561  \nflat_modelPremium Apartment Loft              flat_modelSimplified  \n                        0.083363                          0.049640  \n              flat_modelStandard                 flat_modelTerrace  \n                        0.001024                          0.613380  \n               flat_modelType S1                 flat_modelType S2  \n                        0.150856                          0.106895  \n             lease_commence_date  \n                        0.009919  \n\n\n\n\nShow the code\ncheck_c <- check_collinearity(model)\nplot(check_c)+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    title = element_text(hjust = 1)\n  )\n\n\n\nFrom the plot above, noted that variables flat_model, flat_type and floor_area_sqmhave highly collinearity. While variables lease_commence_date, storey_range and town have relatively low colliearity. May try to exclude some of them in our later analysis."
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html",
    "href": "Take-home_Ex4/Take_home_Ex4.html",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "",
    "text": "In this take-home exercise, we are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time. We are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences."
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#data-used",
    "href": "Take-home_Ex4/Take_home_Ex4.html#data-used",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Data Used",
    "text": "Data Used\nMerchandise Trade provided by Department of Statistics, Singapore (DOS) will be used. The study period will be between January 2020 to December 2022."
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#designing-tools",
    "href": "Take-home_Ex4/Take_home_Ex4.html#designing-tools",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Designing Tools",
    "text": "Designing Tools\nIn this Exercise, we will mainly use R packages like tidyverse and tidyr and their extensions."
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#importing-packages",
    "href": "Take-home_Ex4/Take_home_Ex4.html#importing-packages",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Importing Packages",
    "text": "Importing Packages\n\n\nShow the code\npacman::p_load(tidyverse, tidyr, readxl, knitr, DT, patchwork)"
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#importing-data",
    "href": "Take-home_Ex4/Take_home_Ex4.html#importing-data",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Importing Data",
    "text": "Importing Data\nOur raw dataset is in a report form so that when we import the dataset, we need to set some augments to properly choose our data. Given that our dataset is xlsx format, and the first sheet named “content” is a note of the dataset, the second sheet named “T1” is import data, the third sheet named “T2” is export data, we need to set the sheet name and the range of the sheet to extract, excluding useless rows and columns.\nLet us import the import data by calling the sheet named “T1” and range from A10 to UT129. Let us take a look at the data we just imported using datatable() from DT package.\n\n\nShow the code\nimp<-read_xlsx(\"data/outputFile.xlsx\", sheet = \"T1\", range = \"A10:UT129\")\n\nexp<-read_xlsx(\"data/outputFile.xlsx\", sheet = \"T2\", range = \"A10:DT101\")"
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#data-cleaning",
    "href": "Take-home_Ex4/Take_home_Ex4.html#data-cleaning",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Data cleaning",
    "text": "Data cleaning\nNow since we need to extract data in 2022, let us select columns from column 3 to column 14.\n\n\nShow the code\nimp<-imp%>%\n  select(c(1,3:14))\n\nexp<-exp%>%\n  select(c(1,3:14))\n\n\nThen let us convert rows into columns and columns into rows, so that we have the states/region as variables.\n\n\nShow the code\nimp<-imp%>%\n  gather(Month, value, -`Data Series`)%>%\n  spread(`Data Series`, value)\nwrite_excel_csv(imp, \"data/import.csv\")\n\n\nexp<-exp%>%\n  gather(Month, value, -`Data Series`)%>%\n  spread(`Data Series`, value)\nwrite_excel_csv(exp, \"data/export.csv\")"
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#missing-value-check",
    "href": "Take-home_Ex4/Take_home_Ex4.html#missing-value-check",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Missing value check",
    "text": "Missing value check\nThen let us see is there any missing value in this data set. Codes below will show us the amount of missing values in each column.\n\n\nShow the code\nimp<-read_csv(\"data/import.csv\")\nprint(paste0(\"Count of rows containing missing values in import data table is: \",sum(imp[rowSums(is.na(imp))!=0,])))\n\n\n[1] \"Count of rows containing missing values in import data table is: 0\"\n\n\nShow the code\nexp<-read_csv(\"data/export.csv\")\nprint(paste0(\"Count of rows containing missing values in export data table is: \", sum(exp[rowSums(is.na(exp))!=0,])))\n\n\n[1] \"Count of rows containing missing values in export data table is: 0\"\n\n\nFrom the printed information, we see that the missing values in both data tables are 0."
  },
  {
    "objectID": "Take-home_Ex4/Take_home_Ex4.html#glimpse-at-data-table",
    "href": "Take-home_Ex4/Take_home_Ex4.html#glimpse-at-data-table",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Glimpse at data table",
    "text": "Glimpse at data table\n\nImport dataExport data\n\n\n\n\nShow the code\ndatatable(data = imp, class = \"display\", extensions = \"Buttons\", options = list(dom=\"Bfrtip\", buttons = list(list(extend = \"colvis\", text = \"Exclude/Include Columns\"))))\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndatatable(data = exp, class = \"display\", extensions = \"Buttons\", options = list(dom=\"Bfrtip\", buttons = list(list(extend = \"colvis\", text = \"Exclude/Include Columns\"))))"
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html",
    "href": "Take-home_Ex4/Take-home_Ex4.html",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "",
    "text": "In this take-home exercise, we are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time. We are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences."
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#data-used",
    "href": "Take-home_Ex4/Take-home_Ex4.html#data-used",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Data Used",
    "text": "Data Used\nMerchandise Trade provided by Department of Statistics, Singapore (DOS) will be used. The study period will be between January 2020 to December 2022."
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#designing-tools",
    "href": "Take-home_Ex4/Take-home_Ex4.html#designing-tools",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Designing Tools",
    "text": "Designing Tools\nIn this Exercise, we will mainly use R packages like tidyverse and tidyr and their extensions."
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#importing-packages",
    "href": "Take-home_Ex4/Take-home_Ex4.html#importing-packages",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Importing Packages",
    "text": "Importing Packages\n\n\nShow the code\npacman::p_load(tidyverse, tidyr, readxl, knitr, DT, patchwork)"
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#importing-data",
    "href": "Take-home_Ex4/Take-home_Ex4.html#importing-data",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Importing Data",
    "text": "Importing Data\nOur raw dataset is in a report form so that when we import the dataset, we need to set some augments to properly choose our data. Given that our dataset is xlsx format, and the first sheet named “content” is a note of the dataset, the second sheet named “T1” is import data, the third sheet named “T2” is export data, we need to set the sheet name and the range of the sheet to extract, excluding useless rows and columns.\nLet us import the import data by calling the sheet named “T1” and range from A10 to UT129. Let us take a look at the data we just imported using datatable() from DT package.\n\n\nShow the code\nimp<-read_xlsx(\"data/outputFile.xlsx\", sheet = \"T1\", range = \"A10:UT129\")\n\nexp<-read_xlsx(\"data/outputFile.xlsx\", sheet = \"T2\", range = \"A10:DT101\")"
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#data-cleaning",
    "href": "Take-home_Ex4/Take-home_Ex4.html#data-cleaning",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Data cleaning",
    "text": "Data cleaning\nNow since we need to extract data in 2022, let us select columns from column 3 to column 14.\n\n\nShow the code\nimp<-imp%>%\n  select(c(1,3:14))\n\nexp<-exp%>%\n  select(c(1,3:14))\n\n\nThen let us convert rows into columns and columns into rows, so that we have the states/region as variables.\n\n\nShow the code\nimp<-imp%>%\n  gather(Month, value, -`Data Series`)%>%\n  spread(`Data Series`, value)\nwrite_excel_csv(imp, \"data/import.csv\")\n\n\nexp<-exp%>%\n  gather(Month, value, -`Data Series`)%>%\n  spread(`Data Series`, value)\nwrite_excel_csv(exp, \"data/export.csv\")"
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#missing-value-check",
    "href": "Take-home_Ex4/Take-home_Ex4.html#missing-value-check",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Missing value check",
    "text": "Missing value check\nThen let us see is there any missing value in this data set. Codes below will show us the amount of missing values in each column.\n\n\nShow the code\nimp<-read_csv(\"data/import.csv\")\nprint(paste0(\"Count of rows containing missing values in import data table is: \",sum(imp[rowSums(is.na(imp))!=0,])))\n\n\n[1] \"Count of rows containing missing values in import data table is: 0\"\n\n\nShow the code\nexp<-read_csv(\"data/export.csv\")\nprint(paste0(\"Count of rows containing missing values in export data table is: \", sum(exp[rowSums(is.na(exp))!=0,])))\n\n\n[1] \"Count of rows containing missing values in export data table is: 0\"\n\n\nFrom the printed information, we see that the missing values in both data tables are 0."
  },
  {
    "objectID": "Take-home_Ex4/Take-home_Ex4.html#glimpse-at-data-table",
    "href": "Take-home_Ex4/Take-home_Ex4.html#glimpse-at-data-table",
    "title": "Singapore bi-lateral trade | See what happened?!",
    "section": "Glimpse at data table",
    "text": "Glimpse at data table\n\nImport dataExport data\n\n\n\n\nShow the code\ndatatable(data = imp, class = \"display\", extensions = \"Buttons\", options = list(dom=\"Bfrtip\", buttons = list(list(extend = \"colvis\", text = \"Exclude/Include Columns\"))))\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndatatable(data = exp, class = \"display\", extensions = \"Buttons\", options = list(dom=\"Bfrtip\", buttons = list(list(extend = \"colvis\", text = \"Exclude/Include Columns\"))))"
  }
]