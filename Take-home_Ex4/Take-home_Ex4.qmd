---
title: "Singapore bi-lateral trade | See what happened"
author: "Fangyuan ZHU"
date: 20 Feb 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## Our Task

In this take-home exercise, we are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in **2022** on Singapore bi-lateral trade by using appropriate analytical visualisation techniques learned in **Lesson 6: It's About Time**. We are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.

## Data Used

Merchandise Trade provided by Department of Statistics, Singapore (DOS) will be used. The study period will be between **January 2020 to December 2022**.

## Designing Tools

In this Exercise, we will mainly use R packages like *tidyverse* and *tidyr* and their extensions.

## Importing Packages

-   tidyverse

-   tidyr: provides read_excel() function

-   readxl: provides read_xsls() function

-   knitr: helps to make a tidy table

-   DT: interactive data table. datatable() function

-   patchwork: arange the layout of plots

-   lubridate: ymd_hms

-   data.table: data.table() function

-   hrbrthemes

-   viridis

-   plotly

-   d3heatmap

-   heatmaply

```{r}
pacman::p_load(tidyverse, tidyr, readxl, knitr, DT, patchwork, lubridate, data.table, dplyr, hrbrthemes, viridis, plotly, d3heatmap, heatmaply, gganimate, ggthemes, gifski, gapminder, reshape2)
```

## Importing Data {.tabset .tabset-fade .tabset-pills}

Our raw dataset is in a report form so that when we import the dataset, we need to set some augments to properly choose our data. Given that our dataset is *xlsx* format, and the first sheet named "content" is a note of the dataset, the second sheet named "T1" is import data, the third sheet named "T2" is export data, we need to set the **sheet name** and the **range** of the sheet to extract, excluding useless rows and columns.

Let us import the *import* data by calling the sheet named "T1" and range from A10 to UT129. Let us take a look at the data we just imported using `datatable()` from `DT` package.

```{r eval=FALSE}
imp<-read_xlsx("data/outputFile.xlsx", sheet = "T1", range = "A10:UT129")

exp<-read_xlsx("data/outputFile.xlsx", sheet = "T2", range = "A10:DT101")
```

## Data cleaning

Now since we need to extract data in 2022, let us select columns from **column 3** to **column 14.**

```{r eval=FALSE}
imp<-imp%>%
  select(c(1,3:14))

exp<-exp%>%
  select(c(1,3:14))
```

Then let us convert rows into columns and columns into rows, so that we have the states/region as variables.

```{r eval=FALSE}

imp<-imp%>%
  gather(Month, value, -`Data Series`)%>%
  spread(`Data Series`, value)


exp<-exp%>%
  gather(Month, value, -`Data Series`)%>%
  spread(`Data Series`, value)

```

From the printed information, we see that the missing values in both data tables are 0.

## Data recoding

### Converting data type

Our column of time is formatted with YYYY Month. Now we need to remove the year and convert the month into time type as shown below.

```{r eval=FALSE}
imp$Month<-str_extract(imp$Month, "\\d+ (\\w+)", group = 1)

exp$Month<-str_extract(exp$Month, "\\d+ (\\w+)", group = 1)

imp<-imp%>%
  mutate(Month = recode(Month, "Apr" = "April", "Jan" = "January", "Feb" = "February", "Mar" = "March", "Jun" = "June", "Jul" = "July", "Aug" = "August", "Sep" = "September", "Oct" = "October", "Nov" = "November", "Dec" = "December"))

exp<-exp%>%
  mutate(Month = recode(Month, "Apr" = "April", "Jan" = "January", "Feb" = "February", "Mar" = "March", "Jun" = "June", "Jul" = "July", "Aug" = "August", "Sep" = "September", "Oct" = "October", "Nov" = "November", "Dec" = "December"))

```

Then we sort the rows with the ascending order of month for both data tables.

```{r eval=FALSE}
imp<-imp%>%
  mutate(Month = factor(Month, levels = month.name))%>%
  arrange(imp$Month, decreasing = FALSE)
write_excel_csv(imp, "data/import.csv")


exp<-exp%>%
  mutate(Month = factor(Month, levels = month.name))%>%
  arrange(exp$Month, decreasing = FALSE)
write_excel_csv(exp, "data/export.csv")

```

## Missing value check

Then let us see is there any missing value in this data set. Codes below will show us the amount of missing values in each column.

```{r}
imp<-read_csv("data/import.csv")
exp<-read_csv("data/export.csv")

print(paste0("Count of rows containing missing values in import data table is: ",sum(imp[rowSums(is.na(imp))!=0,])))

print(paste0("Count of rows containing missing values in export data table is: ", sum(exp[rowSums(is.na(exp))!=0,])))
```

### Unifying unit

::: panel-tabset
We see that the unit of the columns are not aligned, so we can unify the unit of *million* and *thousand.* Let us see which columns are in which unit with codes below.

#### Import data

```{r}

kable(head(colnames(imp),10))
```

We see that some columns are calculated in *Thousand Dollars,* some are in *Million Dollars.* Since the *Thousand Dollars* takes the majority, we change *Million Dollars* to thousand dollars. Now let check which columns are in million dollars.

```{r}
grep("Million", colnames(imp))

```

Now we see column 3, 4, 7, 29, 30 and 80 are in million dollars, so that we can check which columns they are.

```{r}
colnames(imp)[c(3,4,7,29,30,80)]
```

Noted that only data from continents are in Million dollars.

#### Export Data

```{r}
kable(head(colnames(imp),10))
```

We see that some columns are calculated in Thousand Dollars, some are in Million Dollars. Since the Thousand Dollars takes the majority, we change Million Dollars to thousand dollars. Now let check which columns are in million dollars.

```{r}
grep("Million", colnames(exp))

```

Now we see column 3, 4, 6, 23, 24 and 60 are in million dollars, so that we can change values in these columns into *Thousand Dollars.*

```{r}
colnames(exp)[c(3,4,6,23,24,60)]
```

Noted that only data from continents are in Million dollars.
:::

### Recode column names
::: panel-tabset

We see that the column names contain unit dollars, which will be useless because we have unify the unit. Therefore let us extract the column names to only retain the countries' names.

#### Import data

```{r}
print(colnames(imp)[-1]<-str_extract(colnames(imp)[-1],"(.+)\\(.+\\)$",group = 1))

```

#### Export data

```{r}
print(colnames(exp)[-1]<-str_extract(colnames(exp)[-1],"(.+)\\(.+\\)$",group = 1))
```
:::

### Glimpse at data table

::: panel-tabset
### Import data

In this interactive data table, users can choose to include/exclude specific columns to show what they want.

```{r}
datatable(data = imp, class = "display", extensions = "Buttons", options = list(dom="Bfrtip", buttons = list(list(extend = "colvis", text = "Exclude/Include Columns"))))

```

Actually, when we look at the column names of import trade data, it can be noted that the *Country's* names include continent names, such as Africa, America, Asia, Europe and Australia. We need to be careful to segment the **country** and **continent** when we analyse the data.

### Export data

In this interactive data table, users can choose to include/exclude specific columns to show what they want.

```{r}
datatable(data = exp, class = "display", extensions = "Buttons", options = list(dom="Bfrtip", buttons = list(list(extend = "colvis", text = "Exclude/Include Columns"))))
```

Actually, when we look at the column names of export trade data, it can be noted that the Country's names include continent names, such as Africa, America, Asia, Europe and Oceania.
:::

## Heatmap
::: panel-tabset

Now before we continue our analysis, firstly let us check the overview of the trade data based on country using interactive heatmaps supported by *Heatmaply.*


### Import data

In the heat map, we exclude continents which are *Africa, America, Asia, Europe, European Union* and *Oceania.*

```{r}
mat<-imp%>%
  select(c(-`Africa `,-`America `,-`Asia `,-`Europe `,-`European Union `,-`Oceania `))
mat<-mat%>%
  select(-Month)
rownames(mat)<-imp$Month

mat<-as.matrix(mat)

p <- heatmaply(mat,
               dendrogram = "none",
               grid_color = "white",
               grid_size = "0.1",
        xlab = "", ylab = "", 
        main = "",
        scale = "column",
        margins = c(60,50,40,20),
        scale_fill_gradient_fun = scale_fill_gradient(low = "light sky blue", high = "dark blue"),
        subplot_widths = c(1.5),
        subplot_heights = c(0.6),
        titleX = FALSE,
        hide_colorbar = TRUE,
        branches_lwd = 0.1,
        custom_hovertext = mat,
        label_names = c("Month", "Country", "Value"),
        fontsize_row = 5, fontsize_col = 5,
        labCol = colnames(mat),
        labRow = rownames(mat),
        heatmap_layers = theme(axis.line=element_blank()),
        seriate = "OLO"
        )
p
```

Noted that there are no values for ***Germany, Democratic Republic Of***and for ***Yemen Democratic.***

### Export data

```{r}
matexp<-exp%>%
  select(c(-`Africa `,-`America `,-`Asia `,-`Europe `,-`European Union `,-`Oceania `))

matexp<-matexp%>%
  select(-Month)
rownames(matexp)<-exp$Month

matexp<-as.matrix(matexp)

p <- heatmaply(matexp,
               dendrogram = "none",
               grid_color = "white",
               grid_size = "0.1",
        xlab = "", ylab = "", 
        main = "",
        scale = "column",
        margins = c(60,50,40,20),
        scale_fill_gradient_fun = scale_fill_gradient(low = "sky blue", high = "dark blue"),
        subplot_widths = c(1.5),
        subplot_heights = c(0.6),
        titleX = FALSE,
        hide_colorbar = TRUE,
        branches_lwd = 0.1,
        custom_hovertext = matexp,
        label_names = c("Month", "Country", "Value"),
        fontsize_row = 5, fontsize_col = 5,
        labCol = colnames(matexp),
        labRow = rownames(matexp),
        heatmap_layers = theme(axis.line=element_blank()),
        seriate = "OLO"
        )
p
```

Also noted that there are no values for ***Germany, Democratic Republic Of*** and for ***Yemen Democratic**.* Therefore, we can remove these two countries by using codes below.

```{r}
imp<-imp[,!names(imp)%in%c("Germany, Democratic Republic Of","Yemen Democratic")]

exp<-exp[,!names(exp)%in%c("Germany, Democratic Republic Of","Yemen Democratic")]

```
:::


## Animate plot
:::panel-subset

### Country level

To fit in the data frame easy to plot, we need to transform all the countries into column. We can customize the function below to achieve that.

```{r}

subdf<-function(df){
  
country<-c()
volume<-c()

for (i in colnames(df)[-1]){
  country<-append(country,rep(i,12))
}

for (i in 2:length(colnames(df))){
  volume<-append(volume,df[[i]])
}

dt<-data.frame(Month = rep(df$Month,length(colnames(df))-1),
                   Country = country,
                   Volume = volume/1000)
return(dt)
}
```

Now we get new created data frames named *import* and *export* using function above.

```{r}
import<-subdf(select(imp,c(-`Africa `,-`America `,-`Asia `,-`Europe `,-`European Union `,-`Oceania `)))%>%
  rename(`Import` = "Volume")

export<-subdf(select(exp,c(-`Africa `,-`America `,-`Asia `,-`Europe `,-`European Union `,-`Oceania `)))%>%
  rename(`Export` = "Volume")

kable(head(import,5))
kable(head(export,5))
```

Now we can combine import data and export data into one data table named ***trade***. But based on the number of countries, we can foresee that volume of import or export will be NA. We can replace ***NA*** with **0**.

```{r}
trade<-full_join(import,export,by = c("Month","Country"))%>%
  replace(is.na(.),0)
```

We can create a new column to show the ratio of *import/export* to show the what **type** of trade takes the **majority** in each country.

```{r}
trade<-trade%>%
  mutate(`Ratio` = Export/(Import+1))
```

Now we can plot scatter plot to show the relationship between import volume and export volume in each country. Since the unit of values are very big, we are supposed to scale the values with ***log10**.* Also since the *Ratio* is much small, let us put more weight on large ones by ***exponential*** the values.

```{r}

graph1 <- trade %>%
  mutate(Month = factor(Month, levels = month.abb))%>%
  ggplot(aes(Import, Export, color = Country,size = exp(Ratio+1)))+
  geom_point(alpha = 0.4, border = "dark grey") +
  scale_x_log10()+
  scale_y_log10()+
  theme_bw()+
  theme(legend.position = "none",
        panel.grid = element_blank(),
        panel.border = element_blank())+
  labs(x = "Import (Thousand Dollars)",
       y = "Export (Thousand Dollars)",
       title = "Import and Export Sales to Countries - SG (2022)",
       subtitle = "Totally 119 countries in 12 months")

graph1_animation <- graph1 +
                      geom_text(aes(x = min(Import),
                                    y = min(Export),
                                    label = as.factor(Month)),
                                hjust=-1.5,
                                vjust =-0.2,
                                alpha = 0.2,
                                col = "gray",
                                size = 20) +
                      transition_states(as.factor(Month),
                                        state_length = 0)+
                      shadow_wake(wake_length = 0.1, alpha = FALSE)
#display the graph
animate(graph1_animation,renderer = gifski_renderer())
```

From the animation above, we see that generally, the trade activity for each country is stable, changing in a small scope. Trades with few of the country have an imbalance in import and export。

### Continent level
```{r}
cimport<-subdf(select(imp,c(`Month`,`Africa `,`America `,`Asia `,`Europe `,`European Union `,`Oceania `)))%>%
  rename(`Import` = "Volume")

cexport<-subdf(select(exp,c(`Month`,`Africa `,`America `,`Asia `,`Europe `,`European Union `,`Oceania `)))%>%
  rename(`Export` = "Volume")

kable(head(cimport,5))
kable(head(cexport,5))
```
```{r}
ctrade<-full_join(cimport,cexport,by = c("Month","Country"))%>%
  replace(is.na(.),0)%>%
  mutate(`Ratio` = Export/(Import+1))%>%
  rename(`Continent` = "Country")
```

```{r}
graph2 <- ctrade %>%
  mutate(Month = factor(Month, levels = month.abb))%>%
  ggplot(aes(Import, Export, color = Continent,size = Ratio+1)) +
  geom_point(alpha = 0.4, border = "dark grey") +
  scale_x_log10()+
  scale_y_log10()+
  theme_bw()+
  theme(panel.grid = element_blank(),
        panel.border = element_blank())+
  labs(x = "Import (Million Dollars)",
       y = "Export (Million Dollars)",
       title = "Import and Export Sales to Continents - SG (2022)",
       subtitle = "Totally 5 continents in 12 months")

graph2_animation <- graph2 +
                      geom_text(aes(x = min(Import),
                                    y = min(Export),
                                    label = as.factor(Month)),
                                hjust=-1.5,
                                vjust =-0.2,
                                alpha = 0.2,
                                col = "gray",
                                size = 20) +
                      transition_states(as.factor(Month),
                                        state_length = 0)+
                      shadow_wake(wake_length = 0.1, alpha = FALSE)
#display the graph
animate(graph2_animation,renderer = gifski_renderer())
```
Noted that import and export trades within Asia are the highest among other continents, while those with Africa are the least. The waving scopes are also stable.Obviously, trades of export with Oceania are more than those of import, though trades of import with Africa are more than those of export.

:::


## Dumbell plot
:::panel-subset

To obviously compare the import trade amounts and export trade amounts among countries, we can plot a line chart which mark import and export amounts in differed colors.

```{r}
fig<-trade%>%
  mutate(Month = factor(Month, levels = month.abb))%>%
  plot_ly(frame = ~Month) %>%
  add_segments(
    x = ~Import, y = ~Country,
    xend = ~Export, yend = ~Country, 
    color = I("gray"), showlegend = FALSE
  ) %>%
  add_markers(
    x = ~Import, y = ~Country, 
    color = I("blue"), 
    name = "Import (Million Dollars)"
  ) %>%
  add_markers(
    x = ~Export, y = ~Country, 
    color = I("red"),
    name  = "Export (Million Dollars)"
  ) %>%
  layout(xaxis = list(title = "Trades per Country"))
fig


```
### Continent level
```{r}
fig<-ctrade%>%
  mutate(Month = factor(Month, levels = month.abb))%>%
  plot_ly(frame = ~Month,
          color = I("gray")) %>%
  add_segments(
    x = ~Import, y = ~Continent,
    xend = ~Export, yend = ~Continent,
    showlegend = FALSE
  ) %>%
  add_markers(
    x = ~Import, y = ~Continent, 
    color = I("blue"), 
    name = "Import (Million Dollars)"
  ) %>%
  add_markers(
    x = ~Export, y = ~Continent, 
    color = I("red"),
    name  = "Export (Million Dollars)"
  ) %>%
  layout(xaxis = list(title = "Trades per Continent"))
fig


```
:::
