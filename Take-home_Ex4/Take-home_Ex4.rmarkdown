---
title: "Singapore bi-lateral trade | See what happened"
author: "Fangyuan ZHU"
date: 20 Feb 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---


## Our Task

In this take-home exercise, we are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in **2022** on Singapore bi-lateral trade by using appropriate analytical visualisation techniques learned in **Lesson 6: It's About Time**. We are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.

## Data Used

Merchandise Trade provided by Department of Statistics, Singapore (DOS) will be used. The study period will be between **January 2020 to December 2022**.

## Designing Tools

In this Exercise, we will mainly use R packages like *tidyverse* and *tidyr* and their extensions.

## Importing Packages

-   tidyverse

-   tidyr: provides read_excel() function

-   readxl: provides read_xsls() function

-   knitr: helps to make a tidy table

-   DT: interactive data table. datatable() function

-   patchwork: arange the layout of plots

-   lubridate: ymd_hms

-   data.table: data.table() function

-   hrbrthemes

-   viridis

-   plotly

-   d3heatmap

-   heatmaply


```{r}
pacman::p_load(tidyverse, tidyr, readxl, knitr, DT, patchwork, lubridate, data.table, dplyr, hrbrthemes, viridis, plotly, d3heatmap, heatmaply)
```


## Importing Data {.tabset .tabset-fade .tabset-pills}

Our raw dataset is in a report form so that when we import the dataset, we need to set some augments to properly choose our data. Given that our dataset is *xlsx* format, and the first sheet named "content" is a note of the dataset, the second sheet named "T1" is import data, the third sheet named "T2" is export data, we need to set the **sheet name** and the **range** of the sheet to extract, excluding useless rows and columns.

Let us import the *import* data by calling the sheet named "T1" and range from A10 to UT129. Let us take a look at the data we just imported using `datatable()` from `DT` package.


```{r eval=FALSE}
imp<-read_xlsx("data/outputFile.xlsx", sheet = "T1", range = "A10:UT129")

exp<-read_xlsx("data/outputFile.xlsx", sheet = "T2", range = "A10:DT101")
```


## Data cleaning

Now since we need to extract data in 2022, let us select columns from **column 3** to **column 14.**


```{r eval=FALSE}
imp<-imp%>%
  select(c(1,3:14))

exp<-exp%>%
  select(c(1,3:14))
```


Then let us convert rows into columns and columns into rows, so that we have the states/region as variables.


```{r eval=FALSE}

imp<-imp%>%
  gather(Month, value, -`Data Series`)%>%
  spread(`Data Series`, value)
write_excel_csv(imp, "data/import.csv")


exp<-exp%>%
  gather(Month, value, -`Data Series`)%>%
  spread(`Data Series`, value)
write_excel_csv(exp, "data/export.csv")
```


## Missing value check

Then let us see is there any missing value in this data set. Codes below will show us the amount of missing values in each column.


```{r}
imp<-read_csv("data/import.csv")

print(paste0("Count of rows containing missing values in import data table is: ",sum(imp[rowSums(is.na(imp))!=0,])))

exp<-read_csv("data/export.csv")
print(paste0("Count of rows containing missing values in export data table is: ", sum(exp[rowSums(is.na(exp))!=0,])))
```


From the printed information, we see that the missing values in both data tables are 0.

## Data recoding

### Converting data type

Our column of time is formatted with YYYY Month. Now we need to remove the year and convert the month into time type as shown below.


```{r}
imp$Month<-str_extract(imp$Month, "\\d+ (\\w+)", group = 1)

exp$Month<-str_extract(exp$Month, "\\d+ (\\w+)", group = 1)

imp<-imp%>%
  mutate(Month = recode(Month, "Apr" = "April", "Jan" = "January", "Feb" = "February", "Mar" = "March", "Jun" = "June", "Jul" = "July", "Aug" = "August", "Sep" = "September", "Oct" = "October", "Nov" = "November", "Dec" = "December"))

exp<-exp%>%
  mutate(Month = recode(Month, "Apr" = "April", "Jan" = "January", "Feb" = "February", "Mar" = "March", "Jun" = "June", "Jul" = "July", "Aug" = "August", "Sep" = "September", "Oct" = "October", "Nov" = "November", "Dec" = "December"))

```


Then we sort the rows with the ascending order of month for both data tables.


```{r}
imp<-imp%>%
  mutate(Month = factor(Month, levels = month.name))%>%
  arrange(imp$Month, decreasing = FALSE)

exp<-exp%>%
  mutate(Month = factor(Month, levels = month.name))%>%
  arrange(exp$Month, decreasing = FALSE)
```


### Unifying unit

::: panel-tabset
We see that the unit of the columns are not aligned, so we can unify the unit of *million* and *thousand.* Let us see which columns are in which unit with codes below.

#### Import data


```{r}
kable(head(colnames(imp),10))
```


We see that some columns are calculated in *Thousand Dollars,* some are in *Million Dollars.* Since the *Thousand Dollars* takes the majority, we change *Million Dollars* to thousand dollars. Now let check which columns are in million dollars.


```{r}
grep("Million", colnames(imp))

```


Now we see column 3, 4, 7, 29, 30 and 80 are in million dollars, so that we can change values in these columns into *Thousand Dollars.*


```{r}
col<-colnames(imp)
for (i in c(3,4,7,29,30,80)){
  imp[,i]<-imp[,i]*1000
}
```


#### Export Data


```{r}
kable(head(colnames(imp),10))
```


We see that some columns are calculated in Thousand Dollars, some are in Million Dollars. Since the Thousand Dollars takes the majority, we change Million Dollars to thousand dollars. Now let check which columns are in million dollars.


```{r}
grep("Million", colnames(exp))

```


Now we see column 3, 4, 6, 23, 24 and 60 are in million dollars, so that we can change values in these columns into *Thousand Dollars.*


```{r}
col<-colnames(exp)
for (i in c(3,4,6,23,24,60)){
  exp[,i]<-exp[,i]*1000
}
```

:::

### Recode column names

We see that the column names contain unit dollars, which will be useless because we have unify the unit. Therefore let us extract the column names to only retain the countries' names.

::: panel-tabset
#### Import data


```{r}
colnames(imp)[-1]<-str_extract(colnames(imp)[-1],"(.+)\\(.+\\)$",group = 1)

```


#### Export data


```{r}
colnames(exp)[-1]<-str_extract(colnames(exp)[-1],"(.+)\\(.+\\)$",group = 1)
```

:::

### Glimpse at data table

::: panel-tabset
### Import data


```{r}

datatable(data = imp, class = "display", extensions = "Buttons", options = list(dom="Bfrtip", buttons = list(list(extend = "colvis", text = "Exclude/Include Columns"))))

```


### Export data


```{r}
datatable(data = exp, class = "display", extensions = "Buttons", options = list(dom="Bfrtip", buttons = list(list(extend = "colvis", text = "Exclude/Include Columns"))))
```

:::

## Heatmap

Now before we continue our analysis, first let us check the statistic summary of the data.

::: panel-tabset

### Import data


```{r}
mat<-imp
mat<-mat%>%
  select(-Month)
rownames(mat)<-imp$Month

mat<-as.matrix(mat)

p <- heatmaply(mat,
               dendrogram = "none",
               grid_color = "white",
               grid_size = "0.1",
        xlab = "", ylab = "", 
        main = "",
        scale = "column",
        margins = c(60,100,40,20),
        scale_fill_gradient_fun = scale_fill_gradient(name = "# of attacks",low = "light sky blue", high = "dark blue"),
        subplot_widths = c(1),
        subplot_heights = c(0.3),
        titleX = FALSE,
        hide_colorbar = TRUE,
        branches_lwd = 0.1,
        custom_hovertext = mat,
        label_names = c("Month", "Country", "Value"),
        fontsize_row = 5, fontsize_col = 5,
        labCol = colnames(mat),
        labRow = rownames(mat),
        heatmap_layers = theme(axis.line=element_blank()),
        seriate = "OLO"
        )
p
```


Noted that there are no values for *Germany, Democratic Republic Of* and for *Yemen Democratic.*

### Export data


```{r}
matexp<-exp
matexp<-matexp%>%
  select(-Month)
rownames(matexp)<-exp$Month

matexp<-as.matrix(matexp)

p <- heatmaply(matexp,
               dendrogram = "none",
               grid_color = "white",
               grid_size = "0.1",
        xlab = "", ylab = "", 
        main = "",
        scale = "column",
        margins = c(60,100,40,20),
        scale_fill_gradient_fun = scale_fill_gradient(name = "# of attacks",low = "sky blue", high = "dark blue"),
        subplot_widths = c(1),
        subplot_heights = c(0.4),
        titleX = FALSE,
        hide_colorbar = TRUE,
        branches_lwd = 0.1,
        custom_hovertext = matexp,
        label_names = c("Month", "Country", "Value"),
        fontsize_row = 5, fontsize_col = 5,
        labCol = colnames(matexp),
        labRow = rownames(matexp),
        heatmap_layers = theme(axis.line=element_blank()),
        seriate = "OLO"
        )
p
```


Also noted that there are no values for *Germany, Democratic Republic Of* and for *Yemen Democratic.*

## Annimate plot


```{r}
impp<-imp%>%
  gather(Country, value, -`Month`)%>%
  spread(`Month`, value)%>%
  group_by(colnames(impp)[-1])

expp<-exp%>%
  gather(Country, value, -`Month`)%>%
  spread(`Month`, value)
```

```{r}
graph1 <- impp %>% 
  # plot the data with scatterplots
  ggplot(aes(Country, color = Country)) +
  geom_point() +
  # axis transformations 
  scale_x_log10() +
  theme_bw()
graph1
```

